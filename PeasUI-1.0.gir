<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.0"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gdk" version="2.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="2.0"/>
  <include name="Pango" version="1.0"/>
  <include name="Peas" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <namespace name="PeasUI"
             version="1.0"
             shared-library="libpeasui-1.0.so.0"
             c:prefix="PeasUI">
    <interface name="Configurable"
               c:type="PeasUIConfigurable"
               glib:type-name="PeasUIConfigurable"
               glib:get-type="peas_ui_configurable_get_type"
               glib:type-struct="ConfigurableInterface">
      <virtual-method name="create_configure_dialog"
                      invoker="create_configure_dialog">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="conf_dlg" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_configurable" invoker="is_configurable">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <method name="is_configurable"
              c:identifier="peas_ui_configurable_is_configurable"
              doc="Returns whether the plugin is configurable.
The default implementation of the is_configurable() method will return %TRUE
if the create_configure_dialog() method was overriden, hence you won&apos;t
usually need to override this method.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="create_configure_dialog"
              c:identifier="peas_ui_configurable_create_configure_dialog"
              doc="Creates the configure dialog widget for the plugin.
The default implementation returns %NULL.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="conf_dlg"
                     direction="out"
                     transfer-ownership="full"
                     doc="A #GtkWindow used for configuration">
            <type name="Gtk.Widget" c:type="GtkWidget**"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="ConfigurableInterface"
            c:type="PeasUIConfigurableInterface"
            glib:is-gtype-struct-for="Configurable">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="create_configure_dialog">
        <callback name="create_configure_dialog"
                  c:type="create_configure_dialog">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="configurable" transfer-ownership="none">
              <type name="Configurable" c:type="PeasUIConfigurable*"/>
            </parameter>
            <parameter name="conf_dlg" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_configurable">
        <callback name="is_configurable" c:type="is_configurable">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="configurable" transfer-ownership="none">
              <type name="Configurable" c:type="PeasUIConfigurable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PluginManager"
           c:type="PeasUIPluginManager"
           parent="Gtk.VBox"
           glib:type-name="PeasUIPluginManager"
           glib:get-type="peas_ui_plugin_manager_get_type"
           glib:type-struct="PluginManagerClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="peas_ui_plugin_manager_new"
                   doc="Creates a new plugin manager for the given #PeasEngine.">
        <return-value transfer-ownership="full">
          <type name="PluginManager" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="engine" transfer-ownership="none">
            <type name="Peas.Engine" c:type="PeasEngine*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="engine" writable="1" construct-only="1">
        <type name="Peas.Engine" c:type="PeasEngine"/>
      </property>
      <field name="vbox">
        <type name="Gtk.VBox" c:type="GtkVBox"/>
      </field>
      <field name="priv">
        <type name="PluginManagerPrivate"
              c:type="PeasUIPluginManagerPrivate*"/>
      </field>
    </class>
    <record name="PluginManagerClass"
            c:type="PeasUIPluginManagerClass"
            glib:is-gtype-struct-for="PluginManager">
      <field name="parent_class">
        <type name="Gtk.VBoxClass" c:type="GtkVBoxClass"/>
      </field>
    </record>
    <record name="PluginManagerPrivate" c:type="PeasUIPluginManagerPrivate">
    </record>
    <function name="plugin_info_get_icon_name"
              c:identifier="peas_ui_plugin_info_get_icon_name"
              doc="Gets the icon name of the plugin.">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="Peas.PluginInfo" c:type="PeasPluginInfo*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
