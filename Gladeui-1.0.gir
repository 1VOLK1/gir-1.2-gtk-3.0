<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.0"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gdk" version="2.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="2.0"/>
  <include name="Pango" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <package name="gtk+-2.0"/>
  <namespace name="Gladeui"
             version="1.0"
             shared-library="libgladeui-1.so.10"
             c:prefix="Glade">
    <callback name="ActionActivateFunc"
              c:type="GladeActionActivateFunc"
              doc="This delagate function is used to catch actions from the core.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="object" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="action_path" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ActionSubmenuFunc"
              c:type="GladeActionSubmenuFunc"
              doc="This delagate function is used to create dynamically customized
submenus. Called only for actions that dont have children.">
      <return-value transfer-ownership="full">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="object" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="action_path" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AddChildFunc"
              c:type="GladeAddChildFunc"
              doc="Called to add @child to @parent.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="parent" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="child" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="App"
           c:type="GladeApp"
           parent="GObject.Object"
           glib:type-name="GladeApp"
           glib:get-type="glade_app_get_type"
           glib:type-struct="AppClass">
      <constructor name="new" c:identifier="glade_app_new">
        <return-value transfer-ownership="full">
          <type name="App" c:type="GladeApp*"/>
        </return-value>
      </constructor>
      <function name="get" c:identifier="glade_app_get">
        <return-value transfer-ownership="full">
          <type name="App" c:type="GladeApp*"/>
        </return-value>
      </function>
      <function name="update_ui" c:identifier="glade_app_update_ui">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="set_window" c:identifier="glade_app_set_window">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_window" c:identifier="glade_app_get_window">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </function>
      <function name="get_catalog_version"
                c:identifier="glade_app_get_catalog_version">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="major" direction="out" transfer-ownership="full">
            <type name="int" c:type="gint*"/>
          </parameter>
          <parameter name="minor" direction="out" transfer-ownership="full">
            <type name="int" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_catalogs" c:identifier="glade_app_get_catalogs">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </function>
      <function name="get_catalog" c:identifier="glade_app_get_catalog">
        <return-value transfer-ownership="full">
          <type name="Catalog" c:type="GladeCatalog*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_editor" c:identifier="glade_app_get_editor">
        <return-value transfer-ownership="full">
          <type name="Editor" c:type="GladeEditor*"/>
        </return-value>
      </function>
      <function name="get_palette" c:identifier="glade_app_get_palette">
        <return-value transfer-ownership="full">
          <type name="Palette" c:type="GladePalette*"/>
        </return-value>
      </function>
      <function name="get_clipboard" c:identifier="glade_app_get_clipboard">
        <return-value transfer-ownership="full">
          <type name="Clipboard" c:type="GladeClipboard*"/>
        </return-value>
      </function>
      <function name="get_clipboard_view"
                c:identifier="glade_app_get_clipboard_view">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </function>
      <function name="get_project" c:identifier="glade_app_get_project">
        <return-value transfer-ownership="full">
          <type name="Project" c:type="GladeProject*"/>
        </return-value>
      </function>
      <function name="check_get_project"
                c:identifier="glade_app_check_get_project">
        <return-value transfer-ownership="full">
          <type name="Project" c:type="GladeProject*"/>
        </return-value>
      </function>
      <function name="set_project"
                c:identifier="glade_app_set_project"
                doc="Sets the active project in the #GladeApp to @project.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_pointer_mode"
                c:identifier="glade_app_get_pointer_mode"
                doc="Gets the current #GladePointerMode">
        <return-value transfer-ownership="full">
          <type name="PointerMode" c:type="GladePointerMode"/>
        </return-value>
      </function>
      <function name="set_pointer_mode"
                c:identifier="glade_app_set_pointer_mode"
                doc="Sets the #GladePointerMode">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <type name="PointerMode" c:type="GladePointerMode"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_project" c:identifier="glade_app_add_project">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="remove_project" c:identifier="glade_app_remove_project">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_projects" c:identifier="glade_app_get_projects">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </function>
      <function name="get_config" c:identifier="glade_app_get_config">
        <return-value transfer-ownership="full">
          <type name="GLib.KeyFile" c:type="GKeyFile*"/>
        </return-value>
      </function>
      <function name="is_project_loaded"
                c:identifier="glade_app_is_project_loaded">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="project_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_project_by_path"
                c:identifier="glade_app_get_project_by_path"
                doc="Finds an open project with @path">
        <return-value transfer-ownership="full">
          <type name="Project" c:type="GladeProject*"/>
        </return-value>
        <parameters>
          <parameter name="project_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="show_properties"
                c:identifier="glade_app_show_properties">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="raise" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="hide_properties"
                c:identifier="glade_app_hide_properties">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="command_copy"
                c:identifier="glade_app_command_copy"
                doc="Copy the active project&apos;s selection (the new copies
will end up on the clipboard and will be set as
the clipboards selection).">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="command_cut"
                c:identifier="glade_app_command_cut"
                doc="Cut the active project&apos;s selection (the cut objects
will end up on the clipboard and will be set as
the clipboards selection).">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="command_paste"
                c:identifier="glade_app_command_paste"
                doc="Paste the clipboard selection to the active project&apos;s
selection (the project must have only one object selected).">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="placeholder" transfer-ownership="none">
            <type name="Placeholder" c:type="GladePlaceholder*"/>
          </parameter>
        </parameters>
      </function>
      <function name="command_delete"
                c:identifier="glade_app_command_delete"
                doc="Delete the active project&apos;s selection.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="command_delete_clipboard"
                c:identifier="glade_app_command_delete_clipboard"
                doc="Delete the clipboard&apos;s selection.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="command_undo" c:identifier="glade_app_command_undo">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="command_redo" c:identifier="glade_app_command_redo">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="config_save" c:identifier="glade_app_config_save">
        <return-value transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </return-value>
      </function>
      <function name="set_transient_parent"
                c:identifier="glade_app_set_transient_parent">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_transient_parent"
                c:identifier="glade_app_get_transient_parent">
        <return-value transfer-ownership="full">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </return-value>
      </function>
      <function name="set_accel_group"
                c:identifier="glade_app_set_accel_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_group" transfer-ownership="none">
            <type name="Gtk.AccelGroup" c:type="GtkAccelGroup*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_accel_group"
                c:identifier="glade_app_get_accel_group">
        <return-value transfer-ownership="full">
          <type name="Gtk.AccelGroup" c:type="GtkAccelGroup*"/>
        </return-value>
      </function>
      <function name="update_instance_count"
                c:identifier="glade_app_update_instance_count">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="undo_button_new"
                c:identifier="glade_app_undo_button_new">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </function>
      <function name="redo_button_new"
                c:identifier="glade_app_redo_button_new">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </function>
      <function name="get_selection" c:identifier="glade_app_get_selection">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </function>
      <function name="is_selected" c:identifier="glade_app_is_selected">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="selection_set" c:identifier="glade_app_selection_set">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="emit_signal" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="selection_add" c:identifier="glade_app_selection_add">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="emit_signal" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="selection_remove"
                c:identifier="glade_app_selection_remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="emit_signal" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="selection_clear"
                c:identifier="glade_app_selection_clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="emit_signal" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="selection_changed"
                c:identifier="glade_app_selection_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="get_catalogs_dir"
                c:identifier="glade_app_get_catalogs_dir">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </function>
      <function name="get_modules_dir"
                c:identifier="glade_app_get_modules_dir">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </function>
      <function name="get_plugins_dir"
                c:identifier="glade_app_get_plugins_dir">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </function>
      <function name="get_pixmaps_dir"
                c:identifier="glade_app_get_pixmaps_dir">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </function>
      <function name="get_locale_dir" c:identifier="glade_app_get_locale_dir">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </function>
      <virtual-method name="show_properties">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="raise" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="hide_properties">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="update_ui_signal">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <property name="active-project" writable="1">
        <type name="Project" c:type="GladeProject"/>
      </property>
      <property name="pointer-mode" writable="1">
        <type name="PointerMode" c:type="GladePointerMode"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="AppPrivate" c:type="GladeAppPrivate*"/>
      </field>
      <glib:signal name="signal-editor-created">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="update-ui">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="AppClass"
            c:type="GladeAppClass"
            glib:is-gtype-struct-for="App">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="show_properties">
        <callback name="show_properties" c:type="show_properties">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="App" c:type="GladeApp*"/>
            </parameter>
            <parameter name="raise" transfer-ownership="none">
              <type name="boolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="hide_properties">
        <callback name="hide_properties" c:type="hide_properties">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="App" c:type="GladeApp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_ui_signal">
        <callback name="update_ui_signal" c:type="update_ui_signal">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="App" c:type="GladeApp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="signal_editor_created">
        <callback name="signal_editor_created" c:type="signal_editor_created">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="App" c:type="GladeApp*"/>
            </parameter>
            <parameter name="signal_editor" transfer-ownership="none">
              <type name="SignalEditor" c:type="GladeSignalEditor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="AppPrivate" c:type="GladeAppPrivate">
    </record>
    <class name="BaseEditor"
           c:type="GladeBaseEditor"
           parent="Gtk.VBox"
           glib:type-name="GladeBaseEditor"
           glib:get-type="glade_base_editor_get_type"
           glib:type-struct="BaseEditorClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="glade_base_editor_new"
                   doc="Creates a new GladeBaseEditor with @container toplevel
support for all the object types indicated in the variable argument list.
Argument List:
o The type name
o The GType the editor will support">
        <return-value transfer-ownership="full">
          <type name="BaseEditor" c:type="GladeBaseEditor*"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="main_editable" transfer-ownership="none">
            <type name="Editable" c:type="GladeEditable*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <method name="append_types"
              c:identifier="glade_base_editor_append_types"
              doc="Appends support for all the object types indicated in the variable argument list.
Argument List:
o The type name
o The GType the editor will support for parents of type @type">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="add_editable"
              c:identifier="glade_base_editor_add_editable"
              doc="Add @gchild editor of type @page to the base editor">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="gchild" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="EditorPageType" c:type="GladeEditorPageType"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_default_properties"
              c:identifier="glade_base_editor_add_default_properties"
              doc="Add @gchild name and type property to @editor">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="gchild" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_properties"
              c:identifier="glade_base_editor_add_properties"
              doc="Add @gchild properties to @editor">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="gchild" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="packing" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="add_label"
              c:identifier="glade_base_editor_add_label"
              doc="Adds a new label to @editor">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_signal_editor"
              c:identifier="glade_base_editor_set_show_signal_editor"
              doc="Shows/hide @editor &apos;s signal editor">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_new_window"
              c:identifier="glade_base_editor_pack_new_window"
              doc="This convenience function create a new dialog window and packs @editor in it.">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="help_markup" transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="container" writable="1">
        <type name="GObject.Object" c:type="GObject"/>
      </property>
      <field name="parent">
        <type name="Gtk.VBox" c:type="GtkVBox"/>
      </field>
      <field name="priv">
        <type name="BaseEditorPrivate" c:type="GladeBaseEditorPrivate*"/>
      </field>
      <glib:signal name="build-child">
        <return-value transfer-ownership="full">
          <type name="GObject.Object" c:type="GObject"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="change-type">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="child-selected">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="delete-child">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="get-display-name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchararray"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-child">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="BaseEditorClass"
            c:type="GladeBaseEditorClass"
            glib:is-gtype-struct-for="BaseEditor">
      <field name="parent_class">
        <type name="Gtk.VBoxClass" c:type="GtkVBoxClass"/>
      </field>
      <field name="child_selected">
        <callback name="child_selected" c:type="child_selected">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="BaseEditor" c:type="GladeBaseEditor*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="change_type">
        <callback name="change_type" c:type="change_type">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="BaseEditor" c:type="GladeBaseEditor*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="GType" c:type="GType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_display_name">
        <callback name="get_display_name" c:type="get_display_name">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="BaseEditor" c:type="GladeBaseEditor*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="build_child">
        <callback name="build_child" c:type="build_child">
          <return-value transfer-ownership="full">
            <type name="Widget" c:type="GladeWidget*"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="BaseEditor" c:type="GladeBaseEditor*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="GType" c:type="GType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_child">
        <callback name="delete_child" c:type="delete_child">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="BaseEditor" c:type="GladeBaseEditor*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_child">
        <callback name="move_child" c:type="move_child">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="BaseEditor" c:type="GladeBaseEditor*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="BaseEditorPrivate" c:type="GladeBaseEditorPrivate">
    </record>
    <constant name="CUSTOM_HEIGHT_REQ" value="20">
      <type name="int"/>
    </constant>
    <constant name="CUSTOM_WIDTH_REQ" value="20">
      <type name="int"/>
    </constant>
    <record name="Catalog" c:type="GladeCatalog">
      <method name="get_name" c:identifier="glade_catalog_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_icon_prefix"
              c:identifier="glade_catalog_get_icon_prefix">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_domain" c:identifier="glade_catalog_get_domain">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_book" c:identifier="glade_catalog_get_book">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_targets" c:identifier="glade_catalog_get_targets">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="get_major_version"
              c:identifier="glade_catalog_get_major_version">
        <return-value transfer-ownership="none">
          <type name="uint16" c:type="guint16"/>
        </return-value>
      </method>
      <method name="get_minor_version"
              c:identifier="glade_catalog_get_minor_version">
        <return-value transfer-ownership="none">
          <type name="uint16" c:type="guint16"/>
        </return-value>
      </method>
      <method name="get_widget_groups"
              c:identifier="glade_catalog_get_widget_groups">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="get_adaptors" c:identifier="glade_catalog_get_adaptors">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="convert_project"
              c:identifier="glade_catalog_convert_project"
              doc="Do any data changes needed to the project for the new
format in an undoable way.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
          <parameter name="new_format" transfer-ownership="none">
            <type name="ProjectFormat" c:type="GladeProjectFormat"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_libglade"
              c:identifier="glade_catalog_supports_libglade">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="supports_gtkbuilder"
              c:identifier="glade_catalog_supports_gtkbuilder">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
    </record>
    <callback name="CatalogInitFunc"
              c:type="GladeCatalogInitFunc"
              doc="Called once at glade startup time for every catalog, catalogs
are initialized in order of dependancies.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="CellRendererIcon"
           c:type="GladeCellRendererIcon"
           parent="Gtk.CellRendererPixbuf"
           glib:type-name="GladeCellRendererIcon"
           glib:get-type="glade_cell_renderer_icon_get_type"
           glib:type-struct="CellRendererIconClass">
      <constructor name="new" c:identifier="glade_cell_renderer_icon_new">
        <return-value transfer-ownership="full">
          <type name="CellRendererIcon" c:type="GtkCellRenderer*"/>
        </return-value>
      </constructor>
      <method name="get_active"
              c:identifier="glade_cell_renderer_icon_get_active">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_active"
              c:identifier="glade_cell_renderer_icon_set_active">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_activatable"
              c:identifier="glade_cell_renderer_icon_get_activatable">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_activatable"
              c:identifier="glade_cell_renderer_icon_set_activatable">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="activatable" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="active" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Gtk.CellRendererPixbuf" c:type="GtkCellRendererPixbuf"/>
      </field>
      <field name="active" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="activatable" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <glib:signal name="activate">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CellRendererIconClass"
            c:type="GladeCellRendererIconClass"
            glib:is-gtype-struct-for="CellRendererIcon">
      <field name="parent_class">
        <type name="Gtk.CellRendererPixbufClass"
              c:type="GtkCellRendererPixbufClass"/>
      </field>
      <field name="activate">
        <callback name="activate" c:type="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell_renderer_icon" transfer-ownership="none">
              <type name="CellRendererIcon" c:type="GladeCellRendererIcon*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="ChildActionActivateFunc"
              c:type="GladeChildActionActivateFunc"
              doc="This delagate function is used to catch packing actions from the core.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="container" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="object" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="action_path" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ChildGetPropertyFunc"
              c:type="GladeChildGetPropertyFunc"
              doc="Called to get the packing property @property_name
on the @child object of @container into @value.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="container" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="child" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="property_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ChildSetPropertyFunc"
              c:type="GladeChildSetPropertyFunc"
              doc="Called to set the packing property @property_name to @value
on the @child object of @container.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="container" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="child" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="property_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ChildVerifyPropertyFunc"
              c:type="GladeChildVerifyPropertyFunc"
              doc="This delagate function is always called whenever setting any
properties with the exception of load time, and copy/paste time
(basicly the two places where we recreate a hierarchy that we
already know &quot;works&quot;) its basicly an optional backend provided
boundry checker for properties.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="container" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="child" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="property_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Clipboard"
           c:type="GladeClipboard"
           parent="GObject.Object"
           glib:type-name="GladeClipboard"
           glib:get-type="glade_clipboard_get_type"
           glib:type-struct="ClipboardClass">
      <constructor name="new" c:identifier="glade_clipboard_new">
        <return-value transfer-ownership="full">
          <type name="Clipboard" c:type="GladeClipboard*"/>
        </return-value>
      </constructor>
      <method name="add"
              c:identifier="glade_clipboard_add"
              doc="Adds @widgets to @clipboard.
This increases the reference count of each #GladeWidget in @widgets.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widgets" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="glade_clipboard_remove"
              doc="Removes @widgets from @clipboard.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widgets" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="selection_add"
              c:identifier="glade_clipboard_selection_add">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="selection_remove"
              c:identifier="glade_clipboard_selection_remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="selection_clear"
              c:identifier="glade_clipboard_selection_clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_has_selection"
              c:identifier="glade_clipboard_get_has_selection">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <property name="has-selection">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="widgets">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="selection">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="has_selection">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="view">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
    </class>
    <record name="ClipboardClass"
            c:type="GladeClipboardClass"
            glib:is-gtype-struct-for="Clipboard">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ClipboardView"
           c:type="GladeClipboardView"
           parent="Gtk.Window"
           glib:type-name="GladeClipboardView"
           glib:get-type="glade_clipboard_view_get_type"
           glib:type-struct="ClipboardViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="glade_clipboard_view_new"
                   doc="Create a new #GladeClipboardView widget for @clipboard.">
        <return-value transfer-ownership="full">
          <type name="ClipboardView" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="clipboard" transfer-ownership="none">
            <type name="Clipboard" c:type="GladeClipboard*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add"
              c:identifier="glade_clipboard_view_add"
              doc="Adds @widget to @view.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="glade_clipboard_view_remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_sel"
              c:identifier="glade_clipboard_view_refresh_sel"
              doc="Synchronizes the treeview selection to the clipboard selection.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
      <field name="widget">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="model">
        <type name="Gtk.ListStore" c:type="GtkListStore*"/>
      </field>
      <field name="clipboard">
        <type name="Clipboard" c:type="GladeClipboard*"/>
      </field>
      <field name="updating">
        <type name="boolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="ClipboardViewClass"
            c:type="GladeClipboardViewClass"
            glib:is-gtype-struct-for="ClipboardView">
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
    </record>
    <class name="Command"
           c:type="GladeCommand"
           parent="GObject.Object"
           glib:type-name="GladeCommand"
           glib:get-type="glade_command_get_type"
           glib:type-struct="CommandClass">
      <function name="push_group"
                c:identifier="glade_command_push_group"
                doc="Marks the begining of a group.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fmt"
                     transfer-ownership="none"
                     doc=" only the description of the first group on the stack is used when embedding groups.">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </function>
      <function name="pop_group"
                c:identifier="glade_command_pop_group"
                doc="Mark the end of a command group.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="get_group_depth"
                c:identifier="glade_command_get_group_depth">
        <return-value transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </return-value>
      </function>
      <function name="set_project_format"
                c:identifier="glade_command_set_project_format"
                doc="Sets the format of the project.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
          <parameter name="fmt" transfer-ownership="none">
            <type name="ProjectFormat" c:type="GladeProjectFormat"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_project_naming_policy"
                c:identifier="glade_command_set_project_naming_policy"
                doc="Sets the naming policy of a project">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
          <parameter name="policy" transfer-ownership="none">
            <type name="NamingPolicy" c:type="GladeNamingPolicy"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_property" c:identifier="glade_command_set_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property" transfer-ownership="none">
            <type name="Property" c:type="GladeProperty*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </function>
      <function name="set_property_value"
                c:identifier="glade_command_set_property_value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property" transfer-ownership="none">
            <type name="Property" c:type="GladeProperty*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_properties"
                c:identifier="glade_command_set_properties">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property" transfer-ownership="none">
            <type name="Property" c:type="GladeProperty*"/>
          </parameter>
          <parameter name="old_value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="new_value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </function>
      <function name="set_properties_list"
                c:identifier="glade_command_set_properties_list">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
          <parameter name="props" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_name" c:identifier="glade_command_set_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="glade_widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="lock_widget"
                c:identifier="glade_command_lock_widget"
                doc="Sets @locked to be in a locked up state
spoken for by @widget, locked widgets cannot
be removed from the project until unlocked.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="lock" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </function>
      <function name="unlock_widget"
                c:identifier="glade_command_unlock_widget"
                doc="Unlocks @widget so that it can be removed
from the project again">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </function>
      <function name="delete"
                c:identifier="glade_command_delete"
                doc="Performs a delete command on the list of widgets.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widgets" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*"/>
          </parameter>
        </parameters>
      </function>
      <function name="create"
                c:identifier="glade_command_create"
                doc="Creates a new widget using @adaptor and put in place of the @placeholder
in the @project">
        <return-value transfer-ownership="full">
          <type name="Widget" c:type="GladeWidget*"/>
        </return-value>
        <parameters>
          <parameter name="adaptor" transfer-ownership="none">
            <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="placeholder" transfer-ownership="none">
            <type name="Placeholder" c:type="GladePlaceholder*"/>
          </parameter>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="cut"
                c:identifier="glade_command_cut"
                doc="Removes the list of widgets and adds them to the clipboard.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widgets" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*"/>
          </parameter>
        </parameters>
      </function>
      <function name="copy"
                c:identifier="glade_command_copy"
                doc="Copies the list of widgets and adds them to the clipboard.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widgets" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*"/>
          </parameter>
        </parameters>
      </function>
      <function name="paste"
                c:identifier="glade_command_paste"
                doc="Performs a paste command on all widgets in @widgets to @parent, possibly
replacing @placeholder (note toplevels dont need a parent; the active project
will be used when pasting toplevel objects).">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widgets" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="placeholder" transfer-ownership="none">
            <type name="Placeholder" c:type="GladePlaceholder*"/>
          </parameter>
        </parameters>
      </function>
      <function name="dnd"
                c:identifier="glade_command_dnd"
                doc="Performs a drag-n-drop command, i.e. removes the list of widgets and adds them
to the new parent, possibly replacing @placeholder (note toplevels dont need a
parent; the active project will be used when pasting toplevel objects).">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widgets" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="placeholder" transfer-ownership="none">
            <type name="Placeholder" c:type="GladePlaceholder*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_signal" c:identifier="glade_command_add_signal">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="glade_widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="signal" transfer-ownership="none">
            <type name="Signal" c:type="GladeSignal*"/>
          </parameter>
        </parameters>
      </function>
      <function name="remove_signal"
                c:identifier="glade_command_remove_signal">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="glade_widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="signal" transfer-ownership="none">
            <type name="Signal" c:type="GladeSignal*"/>
          </parameter>
        </parameters>
      </function>
      <function name="change_signal"
                c:identifier="glade_command_change_signal">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="glade_widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="old_signal" transfer-ownership="none">
            <type name="Signal" c:type="GladeSignal*"/>
          </parameter>
          <parameter name="new_signal" transfer-ownership="none">
            <type name="Signal" c:type="GladeSignal*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_i18n"
                c:identifier="glade_command_set_i18n"
                doc="Sets the i18n data on the property.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property" transfer-ownership="none">
            <type name="Property" c:type="GladeProperty*"/>
          </parameter>
          <parameter name="translatable" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="has_context" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="comment" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="execute" invoker="execute">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="undo" invoker="undo">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="unifies">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="other_cmd" transfer-ownership="none">
            <type name="Command" c:type="GladeCommand*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="collapse">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="other_cmd" transfer-ownership="none">
            <type name="Command" c:type="GladeCommand*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="execute"
              c:identifier="glade_command_execute"
              doc="Executes @command">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="undo"
              c:identifier="glade_command_undo"
              doc="Undo the effects of @command">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="unifies"
              c:identifier="glade_command_unifies"
              doc="Checks whether @command and @other can be unified
to make one single command.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="other" transfer-ownership="none">
            <type name="Command" c:type="GladeCommand*"/>
          </parameter>
        </parameters>
      </method>
      <method name="collapse"
              c:identifier="glade_command_collapse"
              doc="Merges @other into @command, so that @command now
covers both commands and @other can be dispensed with.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="other" transfer-ownership="none">
            <type name="Command" c:type="GladeCommand*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="description">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="group_id">
        <type name="int" c:type="gint"/>
      </field>
    </class>
    <record name="CommandClass"
            c:type="GladeCommandClass"
            glib:is-gtype-struct-for="Command">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="execute">
        <callback name="execute" c:type="execute">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="this_cmd" transfer-ownership="none">
              <type name="Command" c:type="GladeCommand*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="undo">
        <callback name="undo" c:type="undo">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="this_cmd" transfer-ownership="none">
              <type name="Command" c:type="GladeCommand*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unifies">
        <callback name="unifies" c:type="unifies">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="this_cmd" transfer-ownership="none">
              <type name="Command" c:type="GladeCommand*"/>
            </parameter>
            <parameter name="other_cmd" transfer-ownership="none">
              <type name="Command" c:type="GladeCommand*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="collapse">
        <callback name="collapse" c:type="collapse">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="this_cmd" transfer-ownership="none">
              <type name="Command" c:type="GladeCommand*"/>
            </parameter>
            <parameter name="other_cmd" transfer-ownership="none">
              <type name="Command" c:type="GladeCommand*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="ConstructObjectFunc"
              c:type="GladeConstructObjectFunc"
              doc="This function is called to construct a GObject instance.
(for language bindings that may need to construct a wrapper
object).">
      <return-value transfer-ownership="full">
        <type name="GObject.Object" c:type="GObject*"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="n_parameters" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="parameters"
                   transfer-ownership="none"
                   doc=" the new object with.">
          <type name="GObject.Parameter" c:type="GParameter*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CreateEPropFunc"
              c:type="GladeCreateEPropFunc"
              doc="to commit property changes
Creates a GladeEditorProperty to edit @klass">
      <return-value transfer-ownership="full">
        <type name="EditorProperty" c:type="GladeEditorProperty*"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="klass" transfer-ownership="none">
          <type name="PropertyClass" c:type="GladePropertyClass*"/>
        </parameter>
        <parameter name="use_command" transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CreateEditableFunc"
              c:type="GladeCreateEditableFunc"
              doc="This is used to allow the backend to override the way an
editor page is layed out (note that editor widgets are created
on demand and not at startup).">
      <return-value transfer-ownership="full">
        <type name="Editable" c:type="GladeEditable*"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="EditorPageType" c:type="GladeEditorPageType"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="CreateReason"
                 doc="These are the reasons your #GladePostCreateFunc can be called."
                 glib:type-name="GladeCreateReason"
                 glib:get-type="glade_create_reason_get_type"
                 c:type="GladeCreateReason">
      <member name="create_user"
              value="0"
              c:identifier="GLADE_CREATE_USER"
              glib:nick="create-user"/>
      <member name="create_copy"
              value="1"
              c:identifier="GLADE_CREATE_COPY"
              glib:nick="create-copy"/>
      <member name="create_load"
              value="2"
              c:identifier="GLADE_CREATE_LOAD"
              glib:nick="create-load"/>
      <member name="create_rebuild"
              value="3"
              c:identifier="GLADE_CREATE_REBUILD"
              glib:nick="create-rebuild"/>
    </enumeration>
    <record name="Cursor" c:type="_GladeCursor">
      <field name="selector" writable="1">
        <type name="Gdk.Cursor" c:type="GdkCursor*"/>
      </field>
      <field name="add_widget" writable="1">
        <type name="Gdk.Cursor" c:type="GdkCursor*"/>
      </field>
      <field name="resize_top_left" writable="1">
        <type name="Gdk.Cursor" c:type="GdkCursor*"/>
      </field>
      <field name="resize_top_right" writable="1">
        <type name="Gdk.Cursor" c:type="GdkCursor*"/>
      </field>
      <field name="resize_bottom_left" writable="1">
        <type name="Gdk.Cursor" c:type="GdkCursor*"/>
      </field>
      <field name="resize_bottom_right" writable="1">
        <type name="Gdk.Cursor" c:type="GdkCursor*"/>
      </field>
      <field name="resize_left" writable="1">
        <type name="Gdk.Cursor" c:type="GdkCursor*"/>
      </field>
      <field name="resize_right" writable="1">
        <type name="Gdk.Cursor" c:type="GdkCursor*"/>
      </field>
      <field name="resize_top" writable="1">
        <type name="Gdk.Cursor" c:type="GdkCursor*"/>
      </field>
      <field name="resize_bottom" writable="1">
        <type name="Gdk.Cursor" c:type="GdkCursor*"/>
      </field>
      <field name="drag" writable="1">
        <type name="Gdk.Cursor" c:type="GdkCursor*"/>
      </field>
      <field name="add_widget_pixbuf" writable="1">
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </field>
    </record>
    <enumeration name="CursorType" c:type="GladeCursorType">
      <member name="selector" value="0" c:identifier="GLADE_CURSOR_SELECTOR"/>
      <member name="add_widget"
              value="1"
              c:identifier="GLADE_CURSOR_ADD_WIDGET"/>
      <member name="resize_top_left"
              value="2"
              c:identifier="GLADE_CURSOR_RESIZE_TOP_LEFT"/>
      <member name="resize_top_right"
              value="3"
              c:identifier="GLADE_CURSOR_RESIZE_TOP_RIGHT"/>
      <member name="resize_bottom_left"
              value="4"
              c:identifier="GLADE_CURSOR_RESIZE_BOTTOM_LEFT"/>
      <member name="resize_bottom_right"
              value="5"
              c:identifier="GLADE_CURSOR_RESIZE_BOTTOM_RIGHT"/>
      <member name="resize_left"
              value="6"
              c:identifier="GLADE_CURSOR_RESIZE_LEFT"/>
      <member name="resize_right"
              value="7"
              c:identifier="GLADE_CURSOR_RESIZE_RIGHT"/>
      <member name="resize_top"
              value="8"
              c:identifier="GLADE_CURSOR_RESIZE_TOP"/>
      <member name="resize_bottom"
              value="9"
              c:identifier="GLADE_CURSOR_RESIZE_BOTTOM"/>
      <member name="drag" value="10" c:identifier="GLADE_CURSOR_DRAG"/>
    </enumeration>
    <class name="Custom"
           c:type="Custom"
           parent="Gtk.Widget"
           glib:type-name="Custom"
           glib:get-type="custom_get_type"
           glib:type-struct="CustomClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <property name="creation-function" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="int1" writable="1">
        <type name="int" c:type="gint"/>
      </property>
      <property name="int2" writable="1">
        <type name="int" c:type="gint"/>
      </property>
      <property name="string1" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="string2" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="widget">
        <type name="Gtk.Widget" c:type="GtkWidget"/>
      </field>
      <field name="custom_pixmap">
        <type name="Gdk.Pixmap" c:type="GdkPixmap*"/>
      </field>
    </class>
    <record name="CustomClass"
            c:type="GladeCustomClass"
            glib:is-gtype-struct-for="Custom">
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <constant name="DEVHELP_FALLBACK_ICON_FILE" value="devhelp.png">
      <type name="utf8"/>
    </constant>
    <constant name="DEVHELP_ICON_NAME" value="devhelp">
      <type name="utf8"/>
    </constant>
    <callback name="DependsFunc"
              c:type="GladeDependsFunc"
              doc="Checks whether @widget depends on @another to be placed earlier in
the glade file.
the resulting glade file.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GladeWidget*"/>
        </parameter>
        <parameter name="another" transfer-ownership="none">
          <type name="Widget" c:type="GladeWidget*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="DesignLayout"
           c:type="GladeDesignLayout"
           parent="Gtk.Bin"
           glib:type-name="GladeDesignLayout"
           glib:get-type="glade_design_layout_get_type"
           glib:type-struct="DesignLayoutClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="glade_design_layout_new">
        <return-value transfer-ownership="full">
          <type name="DesignLayout" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="widget_event"
              c:identifier="glade_design_layout_widget_event"
              doc="This is called internally by a #GladeWidget recieving an event,
it will marshall the event to the proper #GladeWidget according
to its position in @layout.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event_gwidget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
      <field name="priv">
        <type name="DesignLayoutPrivate" c:type="GladeDesignLayoutPrivate*"/>
      </field>
      <glib:signal name="widget-event">
        <return-value transfer-ownership="full">
          <type name="int" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Gdk.Event" c:type="GdkEvent"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DesignLayoutClass"
            c:type="GladeDesignLayoutClass"
            glib:is-gtype-struct-for="DesignLayout">
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="widget_event">
        <callback name="widget_event" c:type="widget_event">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="project" transfer-ownership="none">
              <type name="Project" c:type="GladeProject*"/>
            </parameter>
            <parameter name="gwidget" transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.Event" c:type="GdkEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="DesignLayoutPrivate" c:type="GladeDesignLayoutPrivate">
    </record>
    <class name="DesignView"
           c:type="GladeDesignView"
           parent="Gtk.VBox"
           glib:type-name="GladeDesignView"
           glib:get-type="glade_design_view_get_type"
           glib:type-struct="DesignViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="glade_design_view_new">
        <return-value transfer-ownership="full">
          <type name="DesignView" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_from_project"
                c:identifier="glade_design_view_get_from_project">
        <return-value transfer-ownership="full">
          <type name="DesignView" c:type="GladeDesignView*"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_project" c:identifier="glade_design_view_get_project">
        <return-value transfer-ownership="full">
          <type name="Project" c:type="GladeProject*"/>
        </return-value>
      </method>
      <method name="get_layout" c:identifier="glade_design_view_get_layout">
        <return-value transfer-ownership="full">
          <type name="DesignLayout" c:type="GladeDesignLayout*"/>
        </return-value>
      </method>
      <property name="project" writable="1" construct-only="1">
        <type name="Project" c:type="GladeProject"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.VBox" c:type="GtkVBox"/>
      </field>
      <field name="priv">
        <type name="DesignViewPrivate" c:type="GladeDesignViewPrivate*"/>
      </field>
    </class>
    <record name="DesignViewClass"
            c:type="GladeDesignViewClass"
            glib:is-gtype-struct-for="DesignView">
      <field name="parent_class">
        <type name="Gtk.VBoxClass" c:type="GtkVBoxClass"/>
      </field>
    </record>
    <record name="DesignViewPrivate" c:type="GladeDesignViewPrivate">
    </record>
    <constant name="ENV_CATALOG_PATH" value="GLADE_CATALOG_PATH">
      <type name="utf8"/>
    </constant>
    <constant name="ENV_MODULE_PATH" value="GLADE_MODULE_PATH">
      <type name="utf8"/>
    </constant>
    <class name="EPropAdjustment"
           c:type="GladeEPropAdjustment"
           parent="EditorProperty"
           glib:type-name="GladeEPropAdjustment"
           glib:get-type="glade_eprop_adjustment_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
    </class>
    <class name="EPropBool"
           c:type="GladeEPropBool"
           parent="EditorProperty"
           glib:type-name="GladeEPropBool"
           glib:get-type="glade_eprop_bool_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
    </class>
    <class name="EPropColor"
           c:type="GladeEPropColor"
           parent="EditorProperty"
           glib:type-name="GladeEPropColor"
           glib:get-type="glade_eprop_color_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
    </class>
    <class name="EPropEnum"
           c:type="GladeEPropEnum"
           parent="EditorProperty"
           glib:type-name="GladeEPropEnum"
           glib:get-type="glade_eprop_enum_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
    </class>
    <class name="EPropFlags"
           c:type="GladeEPropFlags"
           parent="EditorProperty"
           glib:type-name="GladeEPropFlags"
           glib:get-type="glade_eprop_flags_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
    </class>
    <class name="EPropNamedIcon"
           c:type="GladeEPropNamedIcon"
           parent="EditorProperty"
           glib:type-name="GladeEPropNamedIcon"
           glib:get-type="glade_eprop_named_icon_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
    </class>
    <class name="EPropNumeric"
           c:type="GladeEPropNumeric"
           parent="EditorProperty"
           glib:type-name="GladeEPropNumeric"
           glib:get-type="glade_eprop_numeric_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
    </class>
    <class name="EPropObject"
           c:type="GladeEPropObject"
           parent="EditorProperty"
           glib:type-name="GladeEPropObject"
           glib:get-type="glade_eprop_object_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
    </class>
    <class name="EPropObjects"
           c:type="GladeEPropObjects"
           parent="EditorProperty"
           glib:type-name="GladeEPropObjects"
           glib:get-type="glade_eprop_objects_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
    </class>
    <class name="EPropText"
           c:type="GladeEPropText"
           parent="EditorProperty"
           glib:type-name="GladeEPropText"
           glib:get-type="glade_eprop_text_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
    </class>
    <class name="EPropUnichar"
           c:type="GladeEPropUnichar"
           parent="EditorProperty"
           glib:type-name="GladeEPropUnichar"
           glib:get-type="glade_eprop_unichar_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
    </class>
    <interface name="Editable"
               c:type="GladeEditable"
               glib:type-name="GladeEditable"
               glib:get-type="glade_editable_get_type"
               glib:type-struct="EditableIface">
      <virtual-method name="load" invoker="load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_show_name" invoker="set_show_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_name" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load"
              c:identifier="glade_editable_load"
              doc="Loads @widget property values into @editable
(the editable will watch the widgets properties
until its loaded with another widget or %NULL)">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_name"
              c:identifier="glade_editable_set_show_name"
              doc="This only applies for the general page in the property
editor, editables that embed the #GladeEditorTable implementation
for the general page should use this to forward the message
to its embedded editable.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_name" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="EditableIface"
            c:type="GladeEditableIface"
            glib:is-gtype-struct-for="Editable">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load" c:type="load">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="editable" transfer-ownership="none">
              <type name="Editable" c:type="GladeEditable*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_show_name">
        <callback name="set_show_name" c:type="set_show_name">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="editable" transfer-ownership="none">
              <type name="Editable" c:type="GladeEditable*"/>
            </parameter>
            <parameter name="show_name" transfer-ownership="none">
              <type name="boolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Editor"
           c:type="GladeEditor"
           parent="Gtk.VBox"
           glib:type-name="GladeEditor"
           glib:get-type="glade_editor_get_type"
           glib:type-struct="EditorClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="glade_editor_new">
        <return-value transfer-ownership="full">
          <type name="Editor" c:type="GladeEditor*"/>
        </return-value>
      </constructor>
      <function name="dialog_for_widget"
                c:identifier="glade_editor_dialog_for_widget"
                doc="This convenience function creates a new dialog window to edit @widget
specifically.">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="add_signal">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id_widget" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type_widget" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="id_signal" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="callback_name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load_widget"
              c:identifier="glade_editor_load_widget"
              doc="Load @widget into @editor. If @widget is %NULL, clear the editor.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh"
              c:identifier="glade_editor_refresh"
              doc="Synchronize @editor with the currently loaded widget.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="query_dialog" c:identifier="glade_editor_query_dialog">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_info" c:identifier="glade_editor_show_info">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="hide_info" c:identifier="glade_editor_hide_info">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="search_doc_search"
              c:identifier="glade_editor_search_doc_search">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="book" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="search" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_signal_editor"
              c:identifier="glade_editor_set_signal_editor">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="signal_editor" transfer-ownership="none">
            <type name="SignalEditor" c:type="GladeSignalEditor*"/>
          </parameter>
        </parameters>
      </method>
      <property name="show-info">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="widget" writable="1">
        <type name="Widget" c:type="GladeWidget"/>
      </property>
      <field name="vbox">
        <type name="Gtk.VBox" c:type="GtkVBox"/>
      </field>
      <field name="notebook">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="loaded_widget">
        <type name="Widget" c:type="GladeWidget*"/>
      </field>
      <field name="loaded_adaptor">
        <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
      </field>
      <field name="page_widget">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="page_packing">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="page_common">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="page_signals">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="page_atk">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="signal_editor">
        <type name="SignalEditor" c:type="GladeSignalEditor*"/>
      </field>
      <field name="editables">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="packing_page">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="loading">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="project_closed_signal_id">
        <type name="ulong" c:type="gulong"/>
      </field>
      <field name="project_removed_signal_id">
        <type name="ulong" c:type="gulong"/>
      </field>
      <field name="widget_warning_id">
        <type name="ulong" c:type="gulong"/>
      </field>
      <field name="widget_name_id">
        <type name="ulong" c:type="gulong"/>
      </field>
      <field name="reset_button">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="info_button">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="class_field">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="warning">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="class_icon">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="class_label">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="widget_label">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="show_info">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <glib:signal name="gtk-doc-search">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EditorClass"
            c:type="GladeEditorClass"
            glib:is-gtype-struct-for="Editor">
      <field name="parent_class">
        <type name="Gtk.VBoxClass" c:type="GtkVBoxClass"/>
      </field>
      <field name="add_signal">
        <callback name="add_signal" c:type="add_signal">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="editor" transfer-ownership="none">
              <type name="Editor" c:type="GladeEditor*"/>
            </parameter>
            <parameter name="id_widget" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="type_widget" transfer-ownership="none">
              <type name="GType" c:type="GType"/>
            </parameter>
            <parameter name="id_signal" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
            <parameter name="callback_name" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="gtk_doc_search">
        <callback name="gtk_doc_search" c:type="gtk_doc_search">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Editor" c:type="GladeEditor*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="EditorPageType" c:type="GladeEditorPageType">
      <member name="general" value="0" c:identifier="GLADE_PAGE_GENERAL"/>
      <member name="common" value="1" c:identifier="GLADE_PAGE_COMMON"/>
      <member name="packing" value="2" c:identifier="GLADE_PAGE_PACKING"/>
      <member name="atk" value="3" c:identifier="GLADE_PAGE_ATK"/>
      <member name="query" value="4" c:identifier="GLADE_PAGE_QUERY"/>
    </enumeration>
    <class name="EditorProperty"
           c:type="GladeEditorProperty"
           parent="Gtk.HBox"
           glib:type-name="GladeEditorProperty"
           glib:get-type="glade_editor_property_get_type"
           glib:type-struct="EditorPropertyClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <function name="show_i18n_dialog"
                c:identifier="glade_editor_property_show_i18n_dialog"
                doc="Runs a dialog and updates the provided values.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="fmt" transfer-ownership="none">
            <type name="ProjectFormat" c:type="GladeProjectFormat"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="comment" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="has_context"
                     direction="out"
                     transfer-ownership="full">
            <type name="boolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="translatable"
                     direction="out"
                     transfer-ownership="full">
            <type name="boolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </function>
      <function name="show_resource_dialog"
                c:identifier="glade_editor_property_show_resource_dialog">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="show_object_dialog"
                c:identifier="glade_editor_property_show_object_dialog">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="object_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="exception" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter transfer-ownership="none">
            <type name="Property" c:type="GladeProperty*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_input">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="any" c:type="void*"/>
        </return-value>
        <parameters>
          <parameter transfer-ownership="none">
            <type name="Property" c:type="GladeProperty*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load"
              c:identifier="glade_editor_property_load"
              doc="Loads @property values into @eprop and connects.
(the editor property will watch the property&apos;s value
until its loaded with another property or %NULL)">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property" transfer-ownership="none">
            <type name="Property" c:type="GladeProperty*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_by_widget"
              c:identifier="glade_editor_property_load_by_widget"
              doc="Convenience function to load the appropriate #GladeProperty into">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="commit"
              c:identifier="glade_editor_property_commit"
              doc="Commits @value to the property currently being edited by @eprop.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="commit_no_callback"
              c:identifier="glade_editor_property_commit_no_callback">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <property name="property-class" writable="1" construct-only="1">
        <type name="any" c:type="gpointer"/>
      </property>
      <property name="use-command" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.HBox" c:type="GtkHBox"/>
      </field>
      <field name="klass">
        <type name="PropertyClass" c:type="GladePropertyClass*"/>
      </field>
      <field name="property">
        <type name="Property" c:type="GladeProperty*"/>
      </field>
      <field name="item_label">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="label">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="warning">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="input">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="check">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="tooltip_id">
        <type name="ulong" c:type="gulong"/>
      </field>
      <field name="sensitive_id">
        <type name="ulong" c:type="gulong"/>
      </field>
      <field name="changed_id">
        <type name="ulong" c:type="gulong"/>
      </field>
      <field name="enabled_id">
        <type name="ulong" c:type="gulong"/>
      </field>
      <field name="state_id">
        <type name="ulong" c:type="gulong"/>
      </field>
      <field name="loading">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="committing">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="use_command">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <glib:signal name="commit">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="value-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Property" c:type="GladeProperty"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EditorPropertyClass"
            c:type="GladeEditorPropertyClass"
            glib:is-gtype-struct-for="EditorProperty">
      <field name="parent_class">
        <type name="Gtk.HBoxClass" c:type="GtkHBoxClass"/>
      </field>
      <field name="load">
        <callback name="load" c:type="load">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="EditorProperty" c:type="GladeEditorProperty*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Property" c:type="GladeProperty*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_input">
        <callback name="create_input" c:type="create_input">
          <return-value transfer-ownership="full">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="EditorProperty" c:type="GladeEditorProperty*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="commit">
        <callback name="commit" c:type="commit">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="EditorProperty" c:type="GladeEditorProperty*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed" c:type="changed">
          <return-value transfer-ownership="none">
            <type name="any" c:type="void*"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="EditorProperty" c:type="GladeEditorProperty*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Property" c:type="GladeProperty*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="EditorTable"
           c:type="GladeEditorTable"
           parent="Gtk.Table"
           glib:type-name="GladeEditorTable"
           glib:get-type="glade_editor_table_get_type"
           glib:type-struct="EditorTableClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Editable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="glade_editor_table_new"
                   doc="Creates a new #GladeEditorTable.">
        <return-value transfer-ownership="full">
          <type name="EditorTable" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="adaptor" transfer-ownership="none">
            <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="EditorPageType" c:type="GladeEditorPageType"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="Gtk.Table" c:type="GtkTable"/>
      </field>
      <field name="adaptor">
        <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
      </field>
      <field name="loaded_widget">
        <type name="Widget" c:type="GladeWidget*"/>
      </field>
      <field name="group">
        <type name="Gtk.SizeGroup" c:type="GtkSizeGroup*"/>
      </field>
      <field name="name_label">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="name_entry">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="properties">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="type">
        <type name="EditorPageType" c:type="GladeEditorPageType"/>
      </field>
      <field name="loading">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="rows">
        <type name="int" c:type="gint"/>
      </field>
    </class>
    <record name="EditorTableClass"
            c:type="GladeEditorTableClass"
            glib:is-gtype-struct-for="EditorTable">
      <field name="parent">
        <type name="Gtk.TableClass" c:type="GtkTableClass"/>
      </field>
    </record>
    <class name="Fixed"
           c:type="GladeFixed"
           parent="Widget"
           glib:type-name="GladeFixed"
           glib:get-type="glade_fixed_get_type"
           glib:type-struct="FixedClass">
      <property name="can-resize" writable="1" construct="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="height-prop" writable="1" construct="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="width-prop" writable="1" construct="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="x-prop" writable="1" construct="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="y-prop" writable="1" construct="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent_instance">
        <type name="Widget" c:type="GladeWidget"/>
      </field>
      <field name="x_prop">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="y_prop">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="width_prop">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="height_prop">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="can_resize">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="pointer_x_origin">
        <type name="int" c:type="gint"/>
      </field>
      <field name="pointer_y_origin">
        <type name="int" c:type="gint"/>
      </field>
      <field name="pointer_x_child_origin">
        <type name="int" c:type="gint"/>
      </field>
      <field name="pointer_y_child_origin">
        <type name="int" c:type="gint"/>
      </field>
      <field name="child_x_origin">
        <type name="int" c:type="gint"/>
      </field>
      <field name="child_y_origin">
        <type name="int" c:type="gint"/>
      </field>
      <field name="child_width_origin">
        <type name="int" c:type="gint"/>
      </field>
      <field name="child_height_origin">
        <type name="int" c:type="gint"/>
      </field>
      <field name="configuring">
        <type name="Widget" c:type="GladeWidget*"/>
      </field>
      <field name="operation">
        <type name="CursorType" c:type="GladeCursorType"/>
      </field>
      <field name="creating">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="mouse_x">
        <type name="int" c:type="gint"/>
      </field>
      <field name="mouse_y">
        <type name="int" c:type="gint"/>
      </field>
      <glib:signal name="configure-begin">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="configure-child">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="configure-end">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="FixedClass"
            c:type="GladeFixedClass"
            glib:is-gtype-struct-for="Fixed">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GladeWidgetClass"/>
      </field>
      <field name="configure_child">
        <callback name="configure_child" c:type="configure_child">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Fixed" c:type="GladeFixed*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="configure_begin">
        <callback name="configure_begin" c:type="configure_begin">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Fixed" c:type="GladeFixed*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="configure_end">
        <callback name="configure_end" c:type="configure_end">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Fixed" c:type="GladeFixed*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="child_event">
        <callback name="child_event" c:type="child_event">
          <return-value transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Gdk.Event" c:type="GdkEvent*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Fixed" c:type="GladeFixed*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="GCSetPropData" c:type="GCSetPropData">
      <field name="property" writable="1">
        <type name="Property" c:type="GladeProperty*"/>
      </field>
      <field name="new_value" writable="1">
        <type name="GObject.Value" c:type="GValue*"/>
      </field>
      <field name="old_value" writable="1">
        <type name="GObject.Value" c:type="GValue*"/>
      </field>
    </record>
    <glib:boxed c:type="GladeGList"
                glib:name="GList"
                glib:type-name="GladeGList"
                glib:get-type="glade_glist_get_type">
    </glib:boxed>
    <class name="GObjectAdaptor"
           c:type="GladeGObjectAdaptor"
           parent="GObject.Object"
           glib:type-name="GladeGObjectAdaptor"
           glib:get-type="glade_widget_adaptor_get_type">
      <function name="list_adaptors"
                c:identifier="glade_widget_adaptor_list_adaptors"
                doc="Compiles a list of all registered adaptors.">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </function>
      <function name="from_catalog"
                c:identifier="glade_widget_adaptor_from_catalog"
                doc="Dynamicly creates a subclass of #GladeWidgetAdaptor and subclasses
the closest parent adaptor (parent class adapters must be creates/registerd
prior to child classes, otherwise inheritance wont work) and parses in
the relevent catalog info.">
        <return-value transfer-ownership="full">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </return-value>
        <parameters>
          <parameter name="catalog" transfer-ownership="none">
            <type name="Catalog" c:type="GladeCatalog*"/>
          </parameter>
          <parameter name="class_node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
          <parameter name="module" transfer-ownership="none">
            <type name="GModule.Module" c:type="GModule*"/>
          </parameter>
        </parameters>
      </function>
      <function name="create_widget_real"
                c:identifier="glade_widget_adaptor_create_widget_real">
        <return-value transfer-ownership="full">
          <type name="Widget" c:type="GladeWidget*"/>
        </return-value>
        <parameters>
          <parameter name="query" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="first_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </function>
      <function name="get_by_name"
                c:identifier="glade_widget_adaptor_get_by_name">
        <return-value transfer-ownership="full"
                      doc=" or %NULL if such a class doesn&apos;t exist">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_by_type"
                c:identifier="glade_widget_adaptor_get_by_type">
        <return-value transfer-ownership="full"
                      doc=" or %NULL if such a class doesn&apos;t exist">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <method name="register"
              c:identifier="glade_widget_adaptor_register"
              doc="Registers @adaptor into the Glade core (every supported
object type must have a registered adaptor).">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="from_pspec"
              c:identifier="glade_widget_adaptor_from_pspec"
              doc="Assumes @pspec is a property in an object class wrapped by @adaptor,
this function will search for the specific parent adaptor class which
originally introduced @pspec.">
        <return-value transfer-ownership="full"
                      doc=" which is responsable for introducing @pspec.">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </return-value>
        <parameters>
          <parameter name="spec" transfer-ownership="none">
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_class"
              c:identifier="glade_widget_adaptor_get_property_class"
              doc="Retrieves the #GladePropertyClass for @name in @adaptor">
        <return-value transfer-ownership="full">
          <type name="PropertyClass" c:type="GladePropertyClass*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pack_property_class"
              c:identifier="glade_widget_adaptor_get_pack_property_class"
              doc="Retrieves the #GladePropertyClass for @name in">
        <return-value transfer-ownership="full">
          <type name="PropertyClass" c:type="GladePropertyClass*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="default_params"
              c:identifier="glade_widget_adaptor_default_params">
        <return-value transfer-ownership="full">
          <type name="GObject.Parameter" c:type="GParameter*"/>
        </return-value>
        <parameters>
          <parameter name="construct" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="n_params" direction="out" transfer-ownership="full">
            <type name="uint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_object"
              c:identifier="glade_widget_adaptor_construct_object"
              doc="This function is called to construct a GObject instance for
a #GladeWidget of the said @adaptor. (provided for language
bindings that may need to construct a wrapper object).">
        <return-value transfer-ownership="full">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="n_parameters" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="parameters"
                     transfer-ownership="none"
                     doc=" the new object with.">
            <type name="GObject.Parameter" c:type="GParameter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="post_create"
              c:identifier="glade_widget_adaptor_post_create"
              doc="An adaptor function to be called after the object is created">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="CreateReason" c:type="GladeCreateReason"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_internal_child"
              c:identifier="glade_widget_adaptor_get_internal_child"
              doc="Retrieves the internal object @internal_name from @object">
        <return-value transfer-ownership="full">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="internal_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property"
              c:identifier="glade_widget_adaptor_set_property"
              doc="This delagate function is used to apply the property value on
the runtime object.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property"
              c:identifier="glade_widget_adaptor_get_property"
              doc="Gets @value of @property_name on @object.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify_property"
              c:identifier="glade_widget_adaptor_verify_property"
              doc="This delagate function is always called whenever setting any
properties with the exception of load time, and copy/paste time
(basicly the two places where we recreate a hierarchy that we
already know &quot;works&quot;) its basicly an optional backend provided
boundry checker for properties.
will silently return TRUE if the class did not provide a verify function.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add"
              c:identifier="glade_widget_adaptor_add"
              doc="Adds @child to @container.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="glade_widget_adaptor_remove"
              doc="Removes @child from @container.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_children"
              c:identifier="glade_widget_adaptor_get_children"
              doc="Lists the children of @container.">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_child" c:identifier="glade_widget_adaptor_has_child">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_set_property"
              c:identifier="glade_widget_adaptor_child_set_property"
              doc="Sets @child&apos;s packing property identified by @property_name to @value.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_get_property"
              c:identifier="glade_widget_adaptor_child_get_property"
              doc="Gets @child&apos;s packing property identified by @property_name.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_verify_property"
              c:identifier="glade_widget_adaptor_child_verify_property"
              doc="This delagate function is always called whenever setting any
properties with the exception of load time, and copy/paste time
(basicly the two places where we recreate a hierarchy that we
already know &quot;works&quot;) its basicly an optional backend provided
boundry checker for properties.
will silently return TRUE if the class did not provide a verify function.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace_child"
              c:identifier="glade_widget_adaptor_replace_child"
              doc="Replaces @old_obj with @new_obj in @container while positioning
property values.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="old_obj" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="new_obj" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="query"
              c:identifier="glade_widget_adaptor_query"
              doc="certain properties upon creation of this class.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_packing_default"
              c:identifier="glade_widget_adaptor_get_packing_default"
              doc="Gets the default value for @property_id on a widget governed by">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="container_adaptor" transfer-ownership="none">
            <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_container"
              c:identifier="glade_widget_adaptor_is_container"
              doc="Checks whether or not this adaptor has support
to interface with child objects.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="action_add"
              c:identifier="glade_widget_adaptor_action_add"
              doc="Add an action to @adaptor.
If the action is present then it overrides label and stock">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="action_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="stock" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="important" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_action_add"
              c:identifier="glade_widget_adaptor_pack_action_add"
              doc="Add a packing action to @adaptor.
If the action is present then it overrides label and stock">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="action_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="stock" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="important" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="action_remove"
              c:identifier="glade_widget_adaptor_action_remove"
              doc="Remove an @adaptor&apos;s action.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="action_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_action_remove"
              c:identifier="glade_widget_adaptor_pack_action_remove"
              doc="Remove an @adaptor&apos;s packing action.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="action_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_actions_new"
              c:identifier="glade_widget_adaptor_pack_actions_new"
              doc="Create a list of packing actions.">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="action_activate"
              c:identifier="glade_widget_adaptor_action_activate"
              doc="An adaptor function to be called on widget actions.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="action_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_action_activate"
              c:identifier="glade_widget_adaptor_child_action_activate"
              doc="An adaptor function to be called on widget actions.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="action_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="action_submenu"
              c:identifier="glade_widget_adaptor_action_submenu"
              doc="This delagate function is used to create dynamically customized
submenus. Called only for actions that dont have children.">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="action_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="depends"
              c:identifier="glade_widget_adaptor_depends"
              doc="Checks whether @widget depends on @another to be placed earlier in
the glade file.
the resulting glade file.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="another" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_widget"
              c:identifier="glade_widget_adaptor_read_widget"
              doc="This function is called to update @widget from @node
when loading xml files.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_widget"
              c:identifier="glade_widget_adaptor_write_widget"
              doc="This function is called to write @widget to @node
when writing xml files.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="XmlContext" c:type="GladeXmlContext*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_child"
              c:identifier="glade_widget_adaptor_read_child"
              doc="This function is called to update load a child @widget
from @node when loading xml files (will recurse into
glade_widget_read())">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_child"
              c:identifier="glade_widget_adaptor_write_child"
              doc="This function is called to write the child @widget to @node
when writing xml files (takes care of packing and recurses
into glade_widget_write())">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="XmlContext" c:type="GladeXmlContext*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_eprop"
              c:identifier="glade_widget_adaptor_create_eprop"
              doc="to commit property changes
Creates a GladeEditorProperty to edit @klass">
        <return-value transfer-ownership="full">
          <type name="EditorProperty" c:type="GladeEditorProperty*"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <type name="PropertyClass" c:type="GladePropertyClass*"/>
          </parameter>
          <parameter name="use_command" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_eprop_by_name"
              c:identifier="glade_widget_adaptor_create_eprop_by_name"
              doc="to commit property changes
Creates a #GladeEditorProperty to edit #GladePropertyClass @name in @adaptor">
        <return-value transfer-ownership="full">
          <type name="EditorProperty" c:type="GladeEditorProperty*"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="packing" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="use_command" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="string_from_value"
              c:identifier="glade_widget_adaptor_string_from_value"
              doc="For normal properties this is used to serialize
property values, for custom properties its still
needed to update the UI for undo/redo items etc.">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <type name="PropertyClass" c:type="GladePropertyClass*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="fmt" transfer-ownership="none">
            <type name="ProjectFormat" c:type="GladeProjectFormat"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_editable"
              c:identifier="glade_widget_adaptor_create_editable"
              doc="This is used to allow the backend to override the way an
editor page is layed out (note that editor widgets are created
on demand and not at startup).">
        <return-value transfer-ownership="full">
          <type name="Editable" c:type="GladeEditable*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="EditorPageType" c:type="GladeEditorPageType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_signal_class"
              c:identifier="glade_widget_adaptor_get_signal_class"
              doc="Looks up signal class @name on @adaptor.">
        <return-value transfer-ownership="full">
          <type name="SignalClass" c:type="GladeSignalClass*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parent_adaptor"
              c:identifier="glade_widget_adaptor_get_parent_adaptor">
        <return-value transfer-ownership="full">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </return-value>
      </method>
      <property name="book" writable="1" construct-only="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="catalog" writable="1" construct-only="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="cursor">
        <type name="any" c:type="gpointer"/>
      </property>
      <property name="generic-name" writable="1" construct-only="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="icon-name" writable="1" construct-only="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="name" writable="1" construct-only="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="special-child-type" writable="1" construct-only="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="title" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="type" writable="1" construct-only="1">
        <type name="GType" c:type="GType"/>
      </property>
    </class>
    <constant name="GPC_OBJECT_DELIMITER" value=", ">
      <type name="utf8"/>
    </constant>
    <constant name="GPC_PROPERTY_NAMELEN" value="512">
      <type name="int"/>
    </constant>
    <constant name="GRAB_CORNER_WIDTH" value="7">
      <type name="int"/>
    </constant>
    <constant name="GTKBUILDER_VERSIONING_BASE_MAJOR" value="2">
      <type name="int"/>
    </constant>
    <constant name="GTKBUILDER_VERSIONING_BASE_MINOR" value="14">
      <type name="int"/>
    </constant>
    <record name="GWActionClass" c:type="GWActionClass">
      <field name="id" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="path" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="label" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="stock" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="important" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="actions" writable="1">
        <type name="GLib.List" c:type="GList*"/>
      </field>
    </record>
    <callback name="GetChildrenFunc"
              c:type="GladeGetChildrenFunc"
              doc="A function called to get @containers children.">
      <return-value transfer-ownership="full">
        <type name="GLib.List" c:type="GList*"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="container" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="GetInternalFunc"
              c:type="GladeGetInternalFunc"
              doc="Called to lookup @child in composite object @parent by @name.">
      <return-value transfer-ownership="full">
        <type name="GObject.Object" c:type="GObject*"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="parent" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="GetPropertyFunc"
              c:type="GladeGetPropertyFunc"
              doc="Gets @value on @object for a given #GladePropertyClass">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="object" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="property_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="IDAllocator" c:type="GladeIDAllocator">
      <constructor name="new" c:identifier="glade_id_allocator_new">
        <return-value transfer-ownership="full">
          <type name="IDAllocator" c:type="GladeIDAllocator*"/>
        </return-value>
      </constructor>
      <method name="destroy"
              c:identifier="glade_id_allocator_destroy"
              doc="Frees @allocator and its associated memory">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="allocate" c:identifier="glade_id_allocator_allocate">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="release" c:identifier="glade_id_allocator_release">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="Inspector"
           c:type="GladeInspector"
           doc="The #GladeInspector struct contains private data only, and should be manipulated using the functions below."
           parent="Gtk.VBox"
           glib:type-name="GladeInspector"
           glib:get-type="glade_inspector_get_type"
           glib:type-struct="InspectorClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="glade_inspector_new"
                   doc="Creates a new #GladeInspector">
        <return-value transfer-ownership="full">
          <type name="Inspector" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_project"
                   c:identifier="glade_inspector_new_with_project"
                   doc="Creates a new #GladeInspector with @project">
        <return-value transfer-ownership="full">
          <type name="Inspector" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_project"
              c:identifier="glade_inspector_set_project"
              doc="Sets the current project of @inspector to @project. To unset the current
project, pass %NULL for @project.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_project"
              c:identifier="glade_inspector_get_project"
              doc="Note that the method does not ref the returned #GladeProject.">
        <return-value transfer-ownership="full">
          <type name="Project" c:type="GladeProject*"/>
        </return-value>
      </method>
      <method name="get_selected_items"
              c:identifier="glade_inspector_get_selected_items"
              doc="Returns the selected items in the inspector.">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <property name="project" writable="1">
        <type name="Project" c:type="GladeProject"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.VBox" c:type="GtkVBox"/>
      </field>
      <field name="priv">
        <type name="InspectorPrivate" c:type="GladeInspectorPrivate*"/>
      </field>
      <glib:signal name="item-activated">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="selection-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="InspectorClass"
            c:type="GladeInspectorClass"
            glib:is-gtype-struct-for="Inspector">
      <field name="parent_class">
        <type name="Gtk.VBoxClass" c:type="GtkVBoxClass"/>
      </field>
      <field name="selection_changed">
        <callback name="selection_changed" c:type="selection_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="inspector" transfer-ownership="none">
              <type name="Inspector" c:type="GladeInspector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="item_activated">
        <callback name="item_activated" c:type="item_activated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="inspector" transfer-ownership="none">
              <type name="Inspector" c:type="GladeInspector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="InspectorPrivate" c:type="GladeInspectorPrivate">
    </record>
    <enumeration name="ItemAppearance"
                 glib:type-name="GladeItemAppearance"
                 glib:get-type="glade_item_appearance_get_type"
                 c:type="GladeItemAppearance">
      <member name="icon_and_label"
              value="0"
              c:identifier="GLADE_ITEM_ICON_AND_LABEL"
              glib:nick="icon-and-label"/>
      <member name="icon_only"
              value="1"
              c:identifier="GLADE_ITEM_ICON_ONLY"
              glib:nick="icon-only"/>
      <member name="label_only"
              value="2"
              c:identifier="GLADE_ITEM_LABEL_ONLY"
              glib:nick="label-only"/>
    </enumeration>
    <record name="NameContext" c:type="GladeNameContext">
      <constructor name="new" c:identifier="glade_name_context_new">
        <return-value transfer-ownership="full">
          <type name="NameContext" c:type="GladeNameContext*"/>
        </return-value>
      </constructor>
      <method name="destroy" c:identifier="glade_name_context_destroy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="new_name" c:identifier="glade_name_context_new_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="base_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dual_new_name"
              c:identifier="glade_name_context_dual_new_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="another_context" transfer-ownership="none">
            <type name="NameContext" c:type="GladeNameContext*"/>
          </parameter>
          <parameter name="base_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="n_names" c:identifier="glade_name_context_n_names">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="has_name" c:identifier="glade_name_context_has_name">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_name" c:identifier="glade_name_context_add_name">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="release_name"
              c:identifier="glade_name_context_release_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="NamedIconChooserDialog"
           c:type="GladeNamedIconChooserDialog"
           parent="Gtk.Dialog"
           glib:type-name="GladeNamedIconChooserDialog"
           glib:get-type="glade_named_icon_chooser_dialog_get_type"
           glib:type-struct="NamedIconChooserDialogClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="glade_named_icon_chooser_dialog_new"
                   doc="Creates a new #GladeNamedIconChooserDialog.  This function is analogous to
gtk_dialog_new_with_buttons().">
        <return-value transfer-ownership="full">
          <type name="NamedIconChooserDialog" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
          <parameter name="first_button_text" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_icon_name"
              c:identifier="glade_named_icon_chooser_dialog_get_icon_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="set_icon_name"
              c:identifier="glade_named_icon_chooser_dialog_set_icon_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_context"
              c:identifier="glade_named_icon_chooser_dialog_set_context">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_context"
              c:identifier="glade_named_icon_chooser_dialog_get_context">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Dialog" c:type="GtkDialog"/>
      </field>
      <field name="priv">
        <type name="NamedIconChooserDialogPrivate"
              c:type="GladeNamedIconChooserDialogPrivate*"/>
      </field>
      <glib:signal name="icon-activated">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="selection-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="NamedIconChooserDialogClass"
            c:type="GladeNamedIconChooserDialogClass"
            glib:is-gtype-struct-for="NamedIconChooserDialog">
      <field name="parent_class">
        <type name="Gtk.DialogClass" c:type="GtkDialogClass"/>
      </field>
      <field name="icon_activated">
        <callback name="icon_activated" c:type="icon_activated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dialog" transfer-ownership="none">
              <type name="NamedIconChooserDialog"
                    c:type="GladeNamedIconChooserDialog*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selection_changed">
        <callback name="selection_changed" c:type="selection_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dialog" transfer-ownership="none">
              <type name="NamedIconChooserDialog"
                    c:type="GladeNamedIconChooserDialog*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="NamedIconChooserDialogPrivate"
            c:type="GladeNamedIconChooserDialogPrivate">
    </record>
    <enumeration name="NamingPolicy" c:type="GladeNamingPolicy">
      <member name="project_wide"
              value="0"
              c:identifier="GLADE_POLICY_PROJECT_WIDE"/>
      <member name="toplevel_contextual"
              value="1"
              c:identifier="GLADE_POLICY_TOPLEVEL_CONTEXTUAL"/>
    </enumeration>
    <class name="Palette"
           c:type="GladePalette"
           parent="Gtk.VBox"
           glib:type-name="GladePalette"
           glib:get-type="glade_palette_get_type"
           glib:type-struct="PaletteClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="glade_palette_new"
                   doc="Creates a new #GladePalette widget">
        <return-value transfer-ownership="full">
          <type name="Palette" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="catalogs" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="deselect_current_item"
              c:identifier="glade_palette_deselect_current_item"
              doc="Deselects the currently selected item">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sticky_aware" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_item"
              c:identifier="glade_palette_get_current_item"
              doc="Gets the #GladeWidgetAdaptor of the currently selected item.">
        <return-value transfer-ownership="full" doc=" if no item is selected.">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </return-value>
      </method>
      <method name="get_item_appearance"
              c:identifier="glade_palette_get_item_appearance">
        <return-value transfer-ownership="full">
          <type name="ItemAppearance" c:type="GladeItemAppearance"/>
        </return-value>
      </method>
      <method name="set_item_appearance"
              c:identifier="glade_palette_set_item_appearance"
              doc="Sets the appearance of the palette items.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="item_appearance" transfer-ownership="none">
            <type name="ItemAppearance" c:type="GladeItemAppearance"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_use_small_item_icons"
              c:identifier="glade_palette_get_use_small_item_icons">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_use_small_item_icons"
              c:identifier="glade_palette_set_use_small_item_icons"
              doc="Sets whether to use small item icons.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_small_item_icons" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_selector_button"
              c:identifier="glade_palette_set_show_selector_button"
              doc="Sets whether to show the internal widget selector button">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_selector_button" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_show_selector_button"
              c:identifier="glade_palette_get_show_selector_button">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="refresh"
              c:identifier="glade_palette_refresh"
              doc="Refreshes project dependant states of palette buttons">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="create_root_widget"
              c:identifier="glade_palette_create_root_widget">
        <return-value transfer-ownership="full">
          <type name="Widget" c:type="GladeWidget*"/>
        </return-value>
        <parameters>
          <parameter name="adaptor" transfer-ownership="none">
            <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
          </parameter>
        </parameters>
      </method>
      <property name="catalogs" writable="1" construct-only="1">
        <type name="any" c:type="gpointer"/>
      </property>
      <property name="current-item">
        <type name="any" c:type="gpointer"/>
      </property>
      <property name="item-appearance" writable="1">
        <type name="ItemAppearance" c:type="GladeItemAppearance"/>
      </property>
      <property name="show-selector-button" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="use-small-item-icons" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.VBox" c:type="GtkVBox"/>
      </field>
      <field name="priv">
        <type name="PalettePrivate" c:type="GladePalettePrivate*"/>
      </field>
      <glib:signal name="refresh">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="toggled">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PaletteClass"
            c:type="GladePaletteClass"
            glib:is-gtype-struct-for="Palette">
      <field name="parent_class">
        <type name="Gtk.VBoxClass" c:type="GtkVBoxClass"/>
      </field>
      <field name="toggled">
        <callback name="toggled" c:type="toggled">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="palette" transfer-ownership="none">
              <type name="Palette" c:type="GladePalette*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="refresh">
        <callback name="refresh" c:type="refresh">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="palette" transfer-ownership="none">
              <type name="Palette" c:type="GladePalette*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="PalettePrivate" c:type="GladePalettePrivate">
    </record>
    <record name="ParamSpecObjects" c:type="GladeParamSpecObjects">
      <method name="set_type" c:identifier="glade_param_spec_objects_set_type">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="Parameter" c:type="GladeParameter">
      <field name="key" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="value" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <constructor name="new" c:identifier="glade_parameter_new">
        <return-value transfer-ownership="full">
          <type name="Parameter" c:type="GladeParameter*"/>
        </return-value>
      </constructor>
      <method name="clone" c:identifier="glade_parameter_clone">
        <return-value transfer-ownership="full">
          <type name="Parameter" c:type="GladeParameter*"/>
        </return-value>
      </method>
      <method name="free"
              c:identifier="glade_parameter_free"
              doc="Frees @parameter and its associated memory.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <class name="Placeholder"
           c:type="GladePlaceholder"
           parent="Gtk.Widget"
           glib:type-name="GladePlaceholder"
           glib:get-type="glade_placeholder_get_type"
           glib:type-struct="PlaceholderClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="glade_placeholder_new">
        <return-value transfer-ownership="full">
          <type name="Placeholder" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_project" c:identifier="glade_placeholder_get_project">
        <return-value transfer-ownership="full">
          <type name="Project" c:type="GladeProject*"/>
        </return-value>
      </method>
      <method name="get_parent" c:identifier="glade_placeholder_get_parent">
        <return-value transfer-ownership="full">
          <type name="Widget" c:type="GladeWidget*"/>
        </return-value>
      </method>
      <field name="widget">
        <type name="Gtk.Widget" c:type="GtkWidget"/>
      </field>
      <field name="placeholder_pixmap">
        <type name="Gdk.Pixmap" c:type="GdkPixmap*"/>
      </field>
      <field name="packing_actions">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <glib:signal name="set-scroll-adjustments">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PlaceholderClass"
            c:type="GladePlaceholderClass"
            glib:is-gtype-struct-for="Placeholder">
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <enumeration name="PointerMode"
                 doc="Indicates what the pointer is used for in the workspace."
                 glib:type-name="GladePointerMode"
                 glib:get-type="glade_pointer_mode_get_type"
                 c:type="GladePointerMode">
      <member name="Select_widgets"
              value="0"
              c:identifier="select"
              glib:nick="Select-widgets"/>
      <member name="Add_widgets"
              value="1"
              c:identifier="add"
              glib:nick="Add-widgets"/>
      <member name="Drag_and_resize_widgets"
              value="2"
              c:identifier="drag-resize"
              glib:nick="Drag-and-resize-widgets"/>
    </enumeration>
    <callback name="PostCreateFunc"
              c:type="GladePostCreateFunc"
              doc="This function is called exactly once for any project object
instance and can be for any #GladeCreateReason.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="object" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="reason" transfer-ownership="none">
          <type name="CreateReason" c:type="GladeCreateReason"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Project"
           c:type="GladeProject"
           parent="GObject.Object"
           glib:type-name="GladeProject"
           glib:get-type="glade_project_get_type"
           glib:type-struct="ProjectClass">
      <implements name="Gtk.TreeModel"/>
      <constructor name="new"
                   c:identifier="glade_project_new"
                   doc="Creates a new #GladeProject.">
        <return-value transfer-ownership="full">
          <type name="Project" c:type="GladeProject*"/>
        </return-value>
      </constructor>
      <function name="load"
                c:identifier="glade_project_load"
                doc="Opens a project at the given path.">
        <return-value transfer-ownership="full" doc=" failure">
          <type name="Project" c:type="GladeProject*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="verify_properties"
                c:identifier="glade_project_verify_properties"
                doc="Synchonizes @widget with user visible information
about version compatability and notifies the UI
it should update.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </function>
      <function name="update_signal_support_warning"
                c:identifier="glade_project_update_signal_support_warning">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="signal" transfer-ownership="none">
            <type name="Signal" c:type="GladeSignal*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="add_object">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_object">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="undo" invoker="undo">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="redo" invoker="redo">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="next_undo_item" invoker="next_undo_item">
        <return-value transfer-ownership="full">
          <type name="Command" c:type="GladeCommand*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="next_redo_item" invoker="next_redo_item">
        <return-value transfer-ownership="full">
          <type name="Command" c:type="GladeCommand*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="push_undo">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="command" transfer-ownership="none">
            <type name="Command" c:type="GladeCommand*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="save"
              c:identifier="glade_project_save"
              doc="Saves @project to the given path."
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="glade_project_get_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_name" c:identifier="glade_project_get_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="undo"
              c:identifier="glade_project_undo"
              doc="Redoes a #GladeCommand in this project.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="redo" c:identifier="glade_project_redo">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="next_undo_item"
              c:identifier="glade_project_next_undo_item"
              doc="Gets the next undo item on @project&apos;s command stack.">
        <return-value transfer-ownership="full">
          <type name="Command" c:type="GladeCommand*"/>
        </return-value>
      </method>
      <method name="next_redo_item"
              c:identifier="glade_project_next_redo_item"
              doc="Gets the next redo item on @project&apos;s command stack.">
        <return-value transfer-ownership="full">
          <type name="Command" c:type="GladeCommand*"/>
        </return-value>
      </method>
      <method name="push_undo"
              c:identifier="glade_project_push_undo"
              doc="Pushes a newly created #GladeCommand onto @projects stack.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cmd" transfer-ownership="none">
            <type name="Command" c:type="GladeCommand*"/>
          </parameter>
        </parameters>
      </method>
      <method name="undo_items"
              c:identifier="glade_project_undo_items"
              doc="Creates a menu of the undo items in the project stack">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="redo_items"
              c:identifier="glade_project_redo_items"
              doc="Creates a menu of the undo items in the project stack">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="reset_path" c:identifier="glade_project_reset_path">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_readonly"
              c:identifier="glade_project_get_readonly"
              doc="Gets whether the project is read only or not">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_objects" c:identifier="glade_project_get_objects">
        <return-value transfer-ownership="none">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="add_object"
              c:identifier="glade_project_add_object"
              doc="Adds an object to the project.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="old_project"
                     transfer-ownership="none"
                     doc=" (or %NULL for the clipboard)">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_object"
              c:identifier="glade_project_remove_object"
              doc="Removes @object from @project.
Note that when removing the #GObject from the project we
don&apos;t change -&gt;project in the associated #GladeWidget; this
way UNDO can work.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_object" c:identifier="glade_project_has_object">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_widget_by_name"
              c:identifier="glade_project_get_widget_by_name"
              doc="Searches under @ancestor in @project looking for a #GladeWidget named @name.">
        <return-value transfer-ownership="full">
          <type name="Widget" c:type="GladeWidget*"/>
        </return-value>
        <parameters>
          <parameter name="ancestor" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_widget_name"
              c:identifier="glade_project_set_widget_name"
              doc="Sets @name on @widget in @project, if @name is not
available then a new name will be used.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_widget_name"
              c:identifier="glade_project_new_widget_name"
              doc="Creates a new name for a widget that doesn&apos;t collide with any of the names
already in @project. This name will start with @base_name.">
        <return-value transfer-ownership="full" doc=" memory for this string">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="base_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="available_widget_name"
              c:identifier="glade_project_available_widget_name"
              doc="Checks whether @name is an appropriate name for @widget.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_selected" c:identifier="glade_project_is_selected">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="selection_set"
              c:identifier="glade_project_selection_set"
              doc="Set the selection in @project to @object
If @emit_signal is %TRUE, calls glade_project_selection_changed().">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="emit_signal"
                     transfer-ownership="none"
                     doc=" indicating a selection change">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="selection_add"
              c:identifier="glade_project_selection_add"
              doc="Adds @object to the selection chain of @project
If @emit_signal is %TRUE, calls glade_project_selection_changed().">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="emit_signal"
                     transfer-ownership="none"
                     doc=" a selection change">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="selection_remove"
              c:identifier="glade_project_selection_remove"
              doc="Removes @object from the selection chain of @project
If @emit_signal is %TRUE, calls glade_project_selection_changed().">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="emit_signal"
                     transfer-ownership="none"
                     doc=" indicating a selection change">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="selection_clear"
              c:identifier="glade_project_selection_clear"
              doc="Clears @project&apos;s selection chain
If @emit_signal is %TRUE, calls glade_project_selection_changed().">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="emit_signal" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="selection_changed"
              c:identifier="glade_project_selection_changed"
              doc="Causes @project to emit a &quot;selection_changed&quot; signal.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="selection_get" c:identifier="glade_project_selection_get">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="get_has_selection"
              c:identifier="glade_project_get_has_selection">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="resource_fullpath"
              c:identifier="glade_project_resource_fullpath"
              doc="Project resource strings may be relative or fullpaths, but glade
always expects a copy in the glade file directory, this function
is used to make a local path to the file.">
        <return-value transfer-ownership="full"
                      doc=" local path the the project resource.">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="resource" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_loading" c:identifier="glade_project_is_loading">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_file_mtime"
              c:identifier="glade_project_get_file_mtime">
        <return-value transfer-ownership="none">
          <type name="time_t" c:type="time_t"/>
        </return-value>
      </method>
      <method name="get_instance_count"
              c:identifier="glade_project_get_instance_count">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="set_instance_count"
              c:identifier="glade_project_set_instance_count">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="instance_count" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_modified" c:identifier="glade_project_get_modified">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_format" c:identifier="glade_project_set_format">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <type name="ProjectFormat" c:type="GladeProjectFormat"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_format" c:identifier="glade_project_get_format">
        <return-value transfer-ownership="full">
          <type name="ProjectFormat" c:type="GladeProjectFormat"/>
        </return-value>
      </method>
      <method name="preferences"
              c:identifier="glade_project_preferences"
              doc="Runs a preferences dialog for @project.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="verify_widget_adaptor"
              c:identifier="glade_project_verify_widget_adaptor"
              doc="Checks the supported state of this widget adaptor
and generates a string to show in the UI describing why.">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="adaptor" transfer-ownership="none">
            <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none">
            <type name="SupportMask" c:type="GladeSupportMask*"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify_project_for_ui"
              c:identifier="glade_project_verify_project_for_ui"
              doc="Checks the project and updates warning strings in the UI">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="required_libs"
              c:identifier="glade_project_required_libs"
              doc="of the required catalogs for this project">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="set_naming_policy"
              c:identifier="glade_project_set_naming_policy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="policy" transfer-ownership="none">
            <type name="NamingPolicy" c:type="GladeNamingPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_naming_policy"
              c:identifier="glade_project_get_naming_policy">
        <return-value transfer-ownership="full">
          <type name="NamingPolicy" c:type="GladeNamingPolicy"/>
        </return-value>
      </method>
      <method name="get_target_version"
              c:identifier="glade_project_get_target_version"
              doc="Fetches the target version of the @project for @catalog.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="catalog" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="major" direction="out" transfer-ownership="full">
            <type name="int" c:type="gint*"/>
          </parameter>
          <parameter name="minor" direction="out" transfer-ownership="full">
            <type name="int" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="display_dependencies"
              c:identifier="glade_project_display_dependencies">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <property name="format">
        <type name="int" c:type="gint"/>
      </property>
      <property name="has-selection">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="modified">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="path">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="read-only">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ProjectPrivate" c:type="GladeProjectPrivate*"/>
      </field>
      <glib:signal name="add-widget">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Command" c:type="GladeCommand"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="close">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="convert-finished">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="parse-finished">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="remove-widget">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selection-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="targets-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="widget-name-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ProjectClass"
            c:type="GladeProjectClass"
            glib:is-gtype-struct-for="Project">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="add_object">
        <callback name="add_object" c:type="add_object">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="project" transfer-ownership="none">
              <type name="Project" c:type="GladeProject*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_object">
        <callback name="remove_object" c:type="remove_object">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="project" transfer-ownership="none">
              <type name="Project" c:type="GladeProject*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="undo">
        <callback name="undo" c:type="undo">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="project" transfer-ownership="none">
              <type name="Project" c:type="GladeProject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="redo">
        <callback name="redo" c:type="redo">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="project" transfer-ownership="none">
              <type name="Project" c:type="GladeProject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="next_undo_item">
        <callback name="next_undo_item" c:type="next_undo_item">
          <return-value transfer-ownership="full">
            <type name="Command" c:type="GladeCommand*"/>
          </return-value>
          <parameters>
            <parameter name="project" transfer-ownership="none">
              <type name="Project" c:type="GladeProject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="next_redo_item">
        <callback name="next_redo_item" c:type="next_redo_item">
          <return-value transfer-ownership="full">
            <type name="Command" c:type="GladeCommand*"/>
          </return-value>
          <parameters>
            <parameter name="project" transfer-ownership="none">
              <type name="Project" c:type="GladeProject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="push_undo">
        <callback name="push_undo" c:type="push_undo">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="project" transfer-ownership="none">
              <type name="Project" c:type="GladeProject*"/>
            </parameter>
            <parameter name="command" transfer-ownership="none">
              <type name="Command" c:type="GladeCommand*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed" c:type="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="project" transfer-ownership="none">
              <type name="Project" c:type="GladeProject*"/>
            </parameter>
            <parameter name="command" transfer-ownership="none">
              <type name="Command" c:type="GladeCommand*"/>
            </parameter>
            <parameter name="forward" transfer-ownership="none">
              <type name="boolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="widget_name_changed">
        <callback name="widget_name_changed" c:type="widget_name_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="project" transfer-ownership="none">
              <type name="Project" c:type="GladeProject*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selection_changed">
        <callback name="selection_changed" c:type="selection_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="project" transfer-ownership="none">
              <type name="Project" c:type="GladeProject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close" c:type="close">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="project" transfer-ownership="none">
              <type name="Project" c:type="GladeProject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="parse_finished">
        <callback name="parse_finished" c:type="parse_finished">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="project" transfer-ownership="none">
              <type name="Project" c:type="GladeProject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="ProjectConvertFunc"
              c:type="GladeProjectConvertFunc"
              doc="Generally format transperency is implemented at load/save time,
but if some objects need to be setup differently, or some new
objects created (like real GtkAdjustment objects for old inline
property values) this is the place to do those things, be careful
to use the GladeCommand api because conversions are undoable.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="project" transfer-ownership="none">
          <type name="Project" c:type="GladeProject*"/>
        </parameter>
        <parameter name="new_format" transfer-ownership="none">
          <type name="ProjectFormat" c:type="GladeProjectFormat"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="ProjectFormat" c:type="GladeProjectFormat">
      <member name="libglade"
              value="0"
              c:identifier="GLADE_PROJECT_FORMAT_LIBGLADE"/>
      <member name="gtkbuilder"
              value="1"
              c:identifier="GLADE_PROJECT_FORMAT_GTKBUILDER"/>
    </enumeration>
    <enumeration name="ProjectModelColumns"
                 doc="The tree view columns provided by the GtkTreeModel implemented
by GladeProject"
                 c:type="GladeProjectModelColumns">
      <member name="column_icon_name"
              value="0"
              c:identifier="GLADE_PROJECT_MODEL_COLUMN_ICON_NAME"/>
      <member name="column_name"
              value="1"
              c:identifier="GLADE_PROJECT_MODEL_COLUMN_NAME"/>
      <member name="column_type_name"
              value="2"
              c:identifier="GLADE_PROJECT_MODEL_COLUMN_TYPE_NAME"/>
      <member name="column_object"
              value="3"
              c:identifier="GLADE_PROJECT_MODEL_COLUMN_OBJECT"/>
      <member name="n_columns"
              value="4"
              c:identifier="GLADE_PROJECT_MODEL_N_COLUMNS"/>
    </enumeration>
    <record name="ProjectPrivate" c:type="GladeProjectPrivate">
    </record>
    <class name="Property"
           c:type="GladeProperty"
           parent="GObject.Object"
           glib:type-name="GladeProperty"
           glib:get-type="glade_property_get_type"
           glib:type-struct="PropertyClass">
      <constructor name="new"
                   c:identifier="glade_property_new"
                   doc="Creates a #GladeProperty of type @klass for @widget with @value; if
will be used.">
        <return-value transfer-ownership="full">
          <type name="Property" c:type="GladeProperty*"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <type name="PropertyClass" c:type="GladePropertyClass*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     doc=" (the #GladeProperty will assume ownership of @value)">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="class_update_from_node"
                c:identifier="glade_property_class_update_from_node"
                doc="Updates the @property_class with the contents of the node in the xml
file. Only the values found in the xml file are overridden.">
        <return-value transfer-ownership="none"
                      doc=" has Disabled=&quot;TRUE&quot;.">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
          <parameter name="module" transfer-ownership="none">
            <type name="GModule.Module" c:type="GModule*"/>
          </parameter>
          <parameter name="object_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="property_class" transfer-ownership="none">
            <type name="PropertyClass" c:type="GladePropertyClass**"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="push_superuser"
                c:identifier="glade_property_push_superuser">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="pop_superuser"
                c:identifier="glade_property_pop_superuser">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="superuser" c:identifier="glade_property_superuser">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </function>
      <method name="dup" c:identifier="glade_property_dup">
        <return-value transfer-ownership="full">
          <type name="Property" c:type="GladeProperty*"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset"
              c:identifier="glade_property_reset"
              doc="Resets this property to its default value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="original_reset"
              c:identifier="glade_property_original_reset"
              doc="Resets this property to its original default value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="default" c:identifier="glade_property_default">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="original_default"
              c:identifier="glade_property_original_default">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="equals_value" c:identifier="glade_property_equals_value">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equals" c:identifier="glade_property_equals">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="glade_property_set_value"
              doc="Sets the property&apos;s value">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set"
              c:identifier="glade_property_set"
              doc="Sets the property&apos;s value (in a convenient way)">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="glade_property_get_value"
              doc="Retrieve the property value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default"
              c:identifier="glade_property_get_default"
              doc="Retrieve the default property value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get"
              c:identifier="glade_property_get"
              doc="Retrieve the property value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="add_object"
              c:identifier="glade_property_add_object"
              doc="Adds @object to the object list in @property.
or #GParamSpecObject type property.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_object"
              c:identifier="glade_property_remove_object"
              doc="Removes @object from the object list in @property.
or #GParamSpecObject type property.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sync"
              c:identifier="glade_property_sync"
              doc="Synchronize the object with this property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="load"
              c:identifier="glade_property_load"
              doc="Loads the value of @property from the coresponding object instance">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="read"
              c:identifier="glade_property_read"
              doc="Read the value and any attributes for @property from @node, assumes
Note that object values will only be resolved after the project is
completely loaded">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
          <parameter name="node"
                     transfer-ownership="none"
                     doc=" node or a &apos;child&apos; node for packing properties.">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write"
              c:identifier="glade_property_write"
              doc="Write @property to @node">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="XmlContext" c:type="GladeXmlContext*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sensitive" c:identifier="glade_property_set_sensitive">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sensitive" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_support_warning"
              c:identifier="glade_property_set_support_warning">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="disable" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sensitive" c:identifier="glade_property_get_sensitive">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_save_always"
              c:identifier="glade_property_set_save_always"
              doc="Sets whether this property should be special cased
to always be saved regardless of its default value.
(used for some special cases like properties
that are assigned initial values in composite widgets
or derived widget code).">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_save_always"
              c:identifier="glade_property_get_save_always"
              doc="to always be saved regardless of its default value.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_enabled" c:identifier="glade_property_set_enabled">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="enabled" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_enabled" c:identifier="glade_property_get_enabled">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="i18n_set_comment"
              c:identifier="glade_property_i18n_set_comment">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="i18n_get_comment"
              c:identifier="glade_property_i18n_get_comment">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="i18n_set_context"
              c:identifier="glade_property_i18n_set_context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="i18n_get_context"
              c:identifier="glade_property_i18n_get_context">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="i18n_set_translatable"
              c:identifier="glade_property_i18n_set_translatable">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="translatable" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="i18n_get_translatable"
              c:identifier="glade_property_i18n_get_translatable">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="i18n_set_has_context"
              c:identifier="glade_property_i18n_set_has_context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="has_context" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="i18n_get_has_context"
              c:identifier="glade_property_i18n_get_has_context">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <property name="class" writable="1" construct-only="1">
        <type name="any" c:type="gpointer"/>
      </property>
      <property name="enabled" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="i18n-comment" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="i18n-context" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="i18n-has-context" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="i18n-translatable" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="sensitive" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="state">
        <type name="int" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="klass">
        <type name="PropertyClass" c:type="GladePropertyClass*"/>
      </field>
      <field name="widget">
        <type name="Widget" c:type="GladeWidget*"/>
      </field>
      <field name="state">
        <type name="PropertyState" c:type="GladePropertyState"/>
      </field>
      <field name="value">
        <type name="GObject.Value" c:type="GValue*"/>
      </field>
      <field name="insensitive_tooltip">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="support_warning">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="support_disabled" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="sensitive" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="enabled" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="save_always" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="i18n_translatable" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="i18n_has_context" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="i18n_context">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="i18n_comment">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="syncing">
        <type name="int" c:type="gint"/>
      </field>
      <field name="sync_tolerance">
        <type name="int" c:type="gint"/>
      </field>
      <glib:signal name="tooltip-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="value-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PropertyClass"
            c:type="GladePropertyClass"
            glib:is-gtype-struct-for="Property">
      <field name="handle">
        <type name="any" c:type="gpointer"/>
      </field>
      <field name="version_since_major">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="version_since_minor">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="builder_since_major">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="builder_since_minor">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="pspec">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </field>
      <field name="id">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="tooltip">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="def">
        <type name="GObject.Value" c:type="GValue*"/>
      </field>
      <field name="orig_def">
        <type name="GObject.Value" c:type="GValue*"/>
      </field>
      <field name="parameters">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="visible_lines">
        <type name="int" c:type="gint"/>
      </field>
      <field name="libglade_only" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="libglade_unsupported" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="virt" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="optional" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="optional_default" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="construct_only" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="common" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="atk" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="packing" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="query" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="translatable" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="save" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="save_always" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="visible" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="custom_layout" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="ignore" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="needs_sync" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="is_modified" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="themed_icon" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="stock_icon" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="stock" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="transfer_on_paste" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="parentless_widget" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="weight">
        <type name="double" c:type="gdouble"/>
      </field>
      <field name="create_type">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <constructor name="new" c:identifier="glade_property_class_new">
        <return-value transfer-ownership="full">
          <type name="PropertyClass" c:type="GladePropertyClass*"/>
        </return-value>
        <parameters>
          <parameter name="handle" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_spec"
                   c:identifier="glade_property_class_new_from_spec">
        <return-value transfer-ownership="full"
                      doc=" or %NULL if its unsupported.">
          <type name="PropertyClass" c:type="GladePropertyClass*"/>
        </return-value>
        <parameters>
          <parameter name="handle" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="spec" transfer-ownership="none">
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_spec_full"
                   c:identifier="glade_property_class_new_from_spec_full">
        <return-value transfer-ownership="full">
          <type name="PropertyClass" c:type="GladePropertyClass*"/>
        </return-value>
        <parameters>
          <parameter name="handle" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="spec" transfer-ownership="none">
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
          <parameter name="need_handle" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="clone" c:identifier="glade_property_class_clone">
        <return-value transfer-ownership="full">
          <type name="PropertyClass" c:type="GladePropertyClass*"/>
        </return-value>
      </method>
      <method name="free"
              c:identifier="glade_property_class_free"
              doc="Frees @klass and its associated memory.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="is_visible" c:identifier="glade_property_class_is_visible">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_object"
              c:identifier="glade_property_class_is_object"
              doc="that refers to another object in this project.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="fmt" transfer-ownership="none">
            <type name="ProjectFormat" c:type="GladeProjectFormat"/>
          </parameter>
        </parameters>
      </method>
      <method name="make_gvalue_from_string"
              c:identifier="glade_property_class_make_gvalue_from_string">
        <return-value transfer-ownership="full" doc=" and @string criteria.">
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="make_string_from_gvalue"
              c:identifier="glade_property_class_make_string_from_gvalue">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="fmt" transfer-ownership="none">
            <type name="ProjectFormat" c:type="GladeProjectFormat"/>
          </parameter>
        </parameters>
      </method>
      <method name="make_gvalue"
              c:identifier="glade_property_class_make_gvalue">
        <return-value transfer-ownership="full"
                      doc=" and the provided argument.">
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="get_from_gvalue"
              c:identifier="glade_property_class_get_from_gvalue"
              doc="Assignes the provided return location to @value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="make_adjustment"
              c:identifier="glade_property_class_make_adjustment"
              doc="Creates and appropriate GtkAdjustment for use in the editor">
        <return-value transfer-ownership="full">
          <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="match" c:identifier="glade_property_class_match">
        <return-value transfer-ownership="none"
                      doc=" (properties in seperate decendant heirarchies that have the same name are not matches).">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="comp" transfer-ownership="none">
            <type name="PropertyClass" c:type="GladePropertyClass*"/>
          </parameter>
        </parameters>
      </method>
      <method name="void_value" c:identifier="glade_property_class_void_value">
        <return-value transfer-ownership="none"
                      doc=" can be a %NULL value for boxed or object type param specs.">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="compare"
              c:identifier="glade_property_class_compare"
              doc="Compares value1 with value2 according to @klass.
equal to or greater than value2, respectively.">
        <return-value transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="value1" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="value2" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="fmt" transfer-ownership="none">
            <type name="ProjectFormat" c:type="GladeProjectFormat"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="PropertyKlass" c:type="GladePropertyKlass">
      <field name="parent_class" writable="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="dup">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="equals_value">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="set_value">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="get_value">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="sync">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="load">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="value_changed">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="tooltip_changed">
        <type name="any" c:type="pointer"/>
      </field>
    </record>
    <bitfield name="PropertyState" c:type="GladePropertyState">
      <member name="normal" value="0" c:identifier="GLADE_STATE_NORMAL"/>
      <member name="changed" value="1" c:identifier="GLADE_STATE_CHANGED"/>
      <member name="unsupported"
              value="2"
              c:identifier="GLADE_STATE_UNSUPPORTED"/>
      <member name="support_disabled"
              value="4"
              c:identifier="GLADE_STATE_SUPPORT_DISABLED"/>
    </bitfield>
    <callback name="ReadWidgetFunc"
              c:type="GladeReadWidgetFunc"
              doc="This function is called to update @widget from @node.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GladeWidget*"/>
        </parameter>
        <parameter name="node" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="RemoveChildFunc"
              c:type="GladeRemoveChildFunc"
              doc="Called to remove @child from @parent.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="parent" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="child" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ReplaceChildFunc"
              c:type="GladeReplaceChildFunc"
              doc="Called to swap placeholders with project objects
in containers.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="container" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="old_obj" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="new_obj" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="SetPropertyFunc"
              c:type="GladeSetPropertyFunc"
              doc="This delagate function is used to apply the property value on
the runtime object.
Sets @value on @object for a given #GladePropertyClass">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="object" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="property_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Signal" c:type="GladeSignal">
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="handler" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="userdata" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="support_warning" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="after" writable="1" bits="1">
        <type name="uint8" c:type="guint8"/>
      </field>
      <field name="swapped" writable="1" bits="1">
        <type name="uint8" c:type="guint8"/>
      </field>
      <constructor name="new"
                   c:identifier="glade_signal_new"
                   doc="Creates a new #GladeSignal with the given parameters.">
        <return-value transfer-ownership="full">
          <type name="Signal" c:type="GladeSignal*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="handler" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="userdata" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="after" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="swapped" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="clone" c:identifier="glade_signal_clone">
        <return-value transfer-ownership="full">
          <type name="Signal" c:type="GladeSignal*"/>
        </return-value>
      </method>
      <method name="free"
              c:identifier="glade_signal_free"
              doc="Frees @signal and its associated memory.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="equal" c:identifier="glade_signal_equal">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="sig2" transfer-ownership="none">
            <type name="Signal" c:type="GladeSignal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write"
              c:identifier="glade_signal_write"
              doc="Writes @signal to @node">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fmt" transfer-ownership="none">
            <type name="ProjectFormat" c:type="GladeProjectFormat"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="XmlContext" c:type="GladeXmlContext*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_support_warning"
              c:identifier="glade_signal_set_support_warning">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="support_warning" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="SignalClass" c:type="GladeSignalClass">
      <field name="adaptor" writable="1">
        <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
      </field>
      <field name="query" writable="1">
        <type name="GObject.SignalQuery" c:type="GSignalQuery"/>
      </field>
      <field name="version_since_major" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="version_since_minor" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="type" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <class name="SignalEditor"
           c:type="GladeSignalEditor"
           parent="Gtk.VBox"
           glib:type-name="GladeSignalEditor"
           glib:get-type="glade_signal_editor_get_type"
           glib:type-struct="SignalEditorClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="glade_signal_editor_new">
        <return-value transfer-ownership="full">
          <type name="SignalEditor" c:type="GladeSignalEditor*"/>
        </return-value>
        <parameters>
          <parameter name="editor" transfer-ownership="none">
            <type name="any" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="construct_signals_list"
              c:identifier="glade_signal_editor_construct_signals_list">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="load_widget"
              c:identifier="glade_signal_editor_load_widget">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="handler-column" writable="1" construct="1">
        <type name="Gtk.TreeViewColumn" c:type="GtkTreeViewColumn"/>
      </property>
      <property name="handler-completion" writable="1" construct="1">
        <type name="Gtk.TreeModel" c:type="GtkTreeModel"/>
      </property>
      <property name="handler-renderer" writable="1" construct="1">
        <type name="Gtk.CellRenderer" c:type="GtkCellRenderer"/>
      </property>
      <property name="userdata-column" writable="1" construct="1">
        <type name="Gtk.TreeViewColumn" c:type="GtkTreeViewColumn"/>
      </property>
      <property name="userdata-completion" writable="1" construct="1">
        <type name="Gtk.TreeModel" c:type="GtkTreeModel"/>
      </property>
      <property name="userdata-renderer" writable="1" construct="1">
        <type name="Gtk.CellRenderer" c:type="GtkCellRenderer"/>
      </property>
      <field name="parent">
        <type name="Gtk.VBox" c:type="GtkVBox"/>
      </field>
      <field name="priv">
        <type name="SignalEditorPrivate" c:type="GladeSignalEditorPrivate*"/>
      </field>
    </class>
    <record name="SignalEditorClass"
            c:type="GladeSignalEditorClass"
            glib:is-gtype-struct-for="SignalEditor">
      <field name="parent_class">
        <type name="Gtk.VBoxClass" c:type="GtkVBoxClass"/>
      </field>
    </record>
    <record name="SignalEditorPrivate" c:type="GladeSignalEditorPrivate">
    </record>
    <enumeration name="Stock"
                 glib:type-name="GladeStock"
                 glib:get-type="glade_standard_stock_get_type"
                 c:type="GladeStock">
      <member name="gtk_about"
              value="0"
              c:identifier="_About"
              glib:nick="gtk-about"/>
      <member name="gtk_add"
              value="1"
              c:identifier="_Add"
              glib:nick="gtk-add"/>
      <member name="gtk_apply"
              value="2"
              c:identifier="_Apply"
              glib:nick="gtk-apply"/>
      <member name="gtk_sort_ascending"
              value="79"
              c:identifier="_Ascending"
              glib:nick="gtk-sort-ascending"/>
      <member name="gtk_go_back"
              value="25"
              c:identifier="_Back"
              glib:nick="gtk-go-back"/>
      <member name="gtk_zoom_fit"
              value="90"
              c:identifier="Best _Fit"
              glib:nick="gtk-zoom-fit"/>
      <member name="gtk_bold"
              value="3"
              c:identifier="_Bold"
              glib:nick="gtk-bold"/>
      <member name="gtk_goto_bottom"
              value="29"
              c:identifier="_Bottom"
              glib:nick="gtk-goto-bottom"/>
      <member name="gtk_cdrom"
              value="5"
              c:identifier="_CD-Rom"
              glib:nick="gtk-cdrom"/>
      <member name="gtk_cancel"
              value="4"
              c:identifier="_Cancel"
              glib:nick="gtk-cancel"/>
      <member name="gtk_justify_center"
              value="41"
              c:identifier="_Center"
              glib:nick="gtk-justify-center"/>
      <member name="gtk_clear"
              value="6"
              c:identifier="_Clear"
              glib:nick="gtk-clear"/>
      <member name="gtk_close"
              value="7"
              c:identifier="_Close"
              glib:nick="gtk-close"/>
      <member name="gtk_select_color"
              value="77"
              c:identifier="_Color"
              glib:nick="gtk-select-color"/>
      <member name="gtk_connect"
              value="8"
              c:identifier="C_onnect"
              glib:nick="gtk-connect"/>
      <member name="gtk_convert"
              value="9"
              c:identifier="_Convert"
              glib:nick="gtk-convert"/>
      <member name="gtk_copy"
              value="10"
              c:identifier="_Copy"
              glib:nick="gtk-copy"/>
      <member name="gtk_cut"
              value="11"
              c:identifier="Cu_t"
              glib:nick="gtk-cut"/>
      <member name="gtk_unindent"
              value="87"
              c:identifier="Decrease Indent"
              glib:nick="gtk-unindent"/>
      <member name="gtk_delete"
              value="12"
              c:identifier="_Delete"
              glib:nick="gtk-delete"/>
      <member name="gtk_sort_descending"
              value="80"
              c:identifier="_Descending"
              glib:nick="gtk-sort-descending"/>
      <member name="gtk_discard"
              value="17"
              c:identifier="_Discard"
              glib:nick="gtk-discard"/>
      <member name="gtk_disconnect"
              value="18"
              c:identifier="_Disconnect"
              glib:nick="gtk-disconnect"/>
      <member name="gtk_go_down"
              value="26"
              c:identifier="_Down"
              glib:nick="gtk-go-down"/>
      <member name="gtk_edit"
              value="19"
              c:identifier="_Edit"
              glib:nick="gtk-edit"/>
      <member name="gtk_dialog_error"
              value="13"
              c:identifier="Error"
              glib:nick="gtk-dialog-error"/>
      <member name="gtk_execute"
              value="20"
              c:identifier="_Execute"
              glib:nick="gtk-execute"/>
      <member name="gtk_justify_fill"
              value="42"
              c:identifier="_Fill"
              glib:nick="gtk-justify-fill"/>
      <member name="gtk_find"
              value="21"
              c:identifier="_Find"
              glib:nick="gtk-find"/>
      <member name="gtk_find_and_replace"
              value="22"
              c:identifier="Find and _Replace"
              glib:nick="gtk-find-and-replace"/>
      <member name="gtk_goto_first"
              value="30"
              c:identifier="_First"
              glib:nick="gtk-goto-first"/>
      <member name="gtk_floppy"
              value="23"
              c:identifier="_Floppy"
              glib:nick="gtk-floppy"/>
      <member name="gtk_select_font"
              value="78"
              c:identifier="_Font"
              glib:nick="gtk-select-font"/>
      <member name="gtk_media_forward"
              value="46"
              c:identifier="_Forward"
              glib:nick="gtk-media-forward"/>
      <member name="gtk_go_forward"
              value="27"
              c:identifier="_Forward"
              glib:nick="gtk-go-forward"/>
      <member name="gtk_fullscreen"
              value="24"
              c:identifier="_Fullscreen"
              glib:nick="gtk-fullscreen"/>
      <member name="gtk_harddisk"
              value="33"
              c:identifier="_Harddisk"
              glib:nick="gtk-harddisk"/>
      <member name="gtk_help"
              value="34"
              c:identifier="_Help"
              glib:nick="gtk-help"/>
      <member name="gtk_home"
              value="35"
              c:identifier="_Home"
              glib:nick="gtk-home"/>
      <member name="gtk_indent"
              value="36"
              c:identifier="Increase Indent"
              glib:nick="gtk-indent"/>
      <member name="gtk_index"
              value="37"
              c:identifier="_Index"
              glib:nick="gtk-index"/>
      <member name="gtk_info"
              value="38"
              c:identifier="_Information"
              glib:nick="gtk-info"/>
      <member name="gtk_dialog_info"
              value="14"
              c:identifier="Information"
              glib:nick="gtk-dialog-info"/>
      <member name="gtk_italic"
              value="39"
              c:identifier="_Italic"
              glib:nick="gtk-italic"/>
      <member name="gtk_jump_to"
              value="40"
              c:identifier="_Jump to"
              glib:nick="gtk-jump-to"/>
      <member name="gtk_orientation_landscape"
              value="59"
              c:identifier="Landscape"
              glib:nick="gtk-orientation-landscape"/>
      <member name="gtk_goto_last"
              value="31"
              c:identifier="_Last"
              glib:nick="gtk-goto-last"/>
      <member name="gtk_leave_fullscreen"
              value="45"
              c:identifier="_Leave Fullscreen"
              glib:nick="gtk-leave-fullscreen"/>
      <member name="gtk_justify_left"
              value="43"
              c:identifier="_Left"
              glib:nick="gtk-justify-left"/>
      <member name="gtk_network"
              value="54"
              c:identifier="_Network"
              glib:nick="gtk-network"/>
      <member name="gtk_new"
              value="55"
              c:identifier="_New"
              glib:nick="gtk-new"/>
      <member name="gtk_media_next"
              value="47"
              c:identifier="_Next"
              glib:nick="gtk-media-next"/>
      <member name="gtk_no" value="56" c:identifier="_No" glib:nick="gtk-no"/>
      <member name="gtk_zoom_100"
              value="89"
              c:identifier="_Normal Size"
              glib:nick="gtk-zoom-100"/>
      <member name="gtk_ok" value="57" c:identifier="_OK" glib:nick="gtk-ok"/>
      <member name="gtk_open"
              value="58"
              c:identifier="_Open"
              glib:nick="gtk-open"/>
      <member name="gtk_page_setup"
              value="63"
              c:identifier="Page Set_up"
              glib:nick="gtk-page-setup"/>
      <member name="gtk_paste"
              value="64"
              c:identifier="_Paste"
              glib:nick="gtk-paste"/>
      <member name="gtk_media_pause"
              value="48"
              c:identifier="P_ause"
              glib:nick="gtk-media-pause"/>
      <member name="gtk_media_play"
              value="49"
              c:identifier="_Play"
              glib:nick="gtk-media-play"/>
      <member name="gtk_orientation_portrait"
              value="60"
              c:identifier="Portrait"
              glib:nick="gtk-orientation-portrait"/>
      <member name="gtk_preferences"
              value="65"
              c:identifier="_Preferences"
              glib:nick="gtk-preferences"/>
      <member name="gtk_media_previous"
              value="50"
              c:identifier="Pre_vious"
              glib:nick="gtk-media-previous"/>
      <member name="gtk_print"
              value="66"
              c:identifier="_Print"
              glib:nick="gtk-print"/>
      <member name="gtk_print_preview"
              value="67"
              c:identifier="Print Pre_view"
              glib:nick="gtk-print-preview"/>
      <member name="gtk_properties"
              value="68"
              c:identifier="_Properties"
              glib:nick="gtk-properties"/>
      <member name="gtk_dialog_question"
              value="15"
              c:identifier="Question"
              glib:nick="gtk-dialog-question"/>
      <member name="gtk_quit"
              value="69"
              c:identifier="_Quit"
              glib:nick="gtk-quit"/>
      <member name="gtk_media_record"
              value="51"
              c:identifier="_Record"
              glib:nick="gtk-media-record"/>
      <member name="gtk_redo"
              value="70"
              c:identifier="_Redo"
              glib:nick="gtk-redo"/>
      <member name="gtk_refresh"
              value="71"
              c:identifier="_Refresh"
              glib:nick="gtk-refresh"/>
      <member name="gtk_remove"
              value="72"
              c:identifier="_Remove"
              glib:nick="gtk-remove"/>
      <member name="gtk_orientation_reverse_landscape"
              value="61"
              c:identifier="Reverse landscape"
              glib:nick="gtk-orientation-reverse-landscape"/>
      <member name="gtk_orientation_reverse_portrait"
              value="62"
              c:identifier="Reverse portrait"
              glib:nick="gtk-orientation-reverse-portrait"/>
      <member name="gtk_revert_to_saved"
              value="73"
              c:identifier="_Revert"
              glib:nick="gtk-revert-to-saved"/>
      <member name="gtk_media_rewind"
              value="52"
              c:identifier="R_ewind"
              glib:nick="gtk-media-rewind"/>
      <member name="gtk_justify_right"
              value="44"
              c:identifier="_Right"
              glib:nick="gtk-justify-right"/>
      <member name="gtk_save"
              value="74"
              c:identifier="_Save"
              glib:nick="gtk-save"/>
      <member name="gtk_save_as"
              value="75"
              c:identifier="Save _As"
              glib:nick="gtk-save-as"/>
      <member name="gtk_select_all"
              value="76"
              c:identifier="Select _All"
              glib:nick="gtk-select-all"/>
      <member name="gtk_spell_check"
              value="81"
              c:identifier="_Spell Check"
              glib:nick="gtk-spell-check"/>
      <member name="gtk_stop"
              value="82"
              c:identifier="_Stop"
              glib:nick="gtk-stop"/>
      <member name="gtk_media_stop"
              value="53"
              c:identifier="_Stop"
              glib:nick="gtk-media-stop"/>
      <member name="gtk_strikethrough"
              value="83"
              c:identifier="_Strikethrough"
              glib:nick="gtk-strikethrough"/>
      <member name="gtk_goto_top"
              value="32"
              c:identifier="_Top"
              glib:nick="gtk-goto-top"/>
      <member name="gtk_undelete"
              value="84"
              c:identifier="_Undelete"
              glib:nick="gtk-undelete"/>
      <member name="gtk_underline"
              value="85"
              c:identifier="_Underline"
              glib:nick="gtk-underline"/>
      <member name="gtk_undo"
              value="86"
              c:identifier="_Undo"
              glib:nick="gtk-undo"/>
      <member name="gtk_go_up"
              value="28"
              c:identifier="_Up"
              glib:nick="gtk-go-up"/>
      <member name="gtk_dialog_warning"
              value="16"
              c:identifier="Warning"
              glib:nick="gtk-dialog-warning"/>
      <member name="gtk_yes"
              value="88"
              c:identifier="_Yes"
              glib:nick="gtk-yes"/>
      <member name="gtk_zoom_in"
              value="91"
              c:identifier="Zoom _In"
              glib:nick="gtk-zoom-in"/>
      <member name="gtk_zoom_out"
              value="92"
              c:identifier="Zoom _Out"
              glib:nick="gtk-zoom-out"/>
    </enumeration>
    <enumeration name="StockImage"
                 glib:type-name="GladeStockImage"
                 glib:get-type="glade_standard_stock_image_get_type"
                 c:type="GladeStockImage">
      <member name="gtk_about"
              value="0"
              c:identifier="_About"
              glib:nick="gtk-about"/>
      <member name="gtk_add"
              value="1"
              c:identifier="_Add"
              glib:nick="gtk-add"/>
      <member name="gtk_apply"
              value="2"
              c:identifier="_Apply"
              glib:nick="gtk-apply"/>
      <member name="gtk_sort_ascending"
              value="79"
              c:identifier="_Ascending"
              glib:nick="gtk-sort-ascending"/>
      <member name="gtk_go_back"
              value="25"
              c:identifier="_Back"
              glib:nick="gtk-go-back"/>
      <member name="gtk_zoom_fit"
              value="90"
              c:identifier="Best _Fit"
              glib:nick="gtk-zoom-fit"/>
      <member name="gtk_bold"
              value="3"
              c:identifier="_Bold"
              glib:nick="gtk-bold"/>
      <member name="gtk_goto_bottom"
              value="29"
              c:identifier="_Bottom"
              glib:nick="gtk-goto-bottom"/>
      <member name="gtk_cdrom"
              value="5"
              c:identifier="_CD-Rom"
              glib:nick="gtk-cdrom"/>
      <member name="gtk_cancel"
              value="4"
              c:identifier="_Cancel"
              glib:nick="gtk-cancel"/>
      <member name="gtk_justify_center"
              value="41"
              c:identifier="_Center"
              glib:nick="gtk-justify-center"/>
      <member name="gtk_clear"
              value="6"
              c:identifier="_Clear"
              glib:nick="gtk-clear"/>
      <member name="gtk_close"
              value="7"
              c:identifier="_Close"
              glib:nick="gtk-close"/>
      <member name="gtk_select_color"
              value="77"
              c:identifier="_Color"
              glib:nick="gtk-select-color"/>
      <member name="gtk_connect"
              value="8"
              c:identifier="C_onnect"
              glib:nick="gtk-connect"/>
      <member name="gtk_convert"
              value="9"
              c:identifier="_Convert"
              glib:nick="gtk-convert"/>
      <member name="gtk_copy"
              value="10"
              c:identifier="_Copy"
              glib:nick="gtk-copy"/>
      <member name="gtk_cut"
              value="11"
              c:identifier="Cu_t"
              glib:nick="gtk-cut"/>
      <member name="gtk_unindent"
              value="87"
              c:identifier="Decrease Indent"
              glib:nick="gtk-unindent"/>
      <member name="gtk_delete"
              value="12"
              c:identifier="_Delete"
              glib:nick="gtk-delete"/>
      <member name="gtk_sort_descending"
              value="80"
              c:identifier="_Descending"
              glib:nick="gtk-sort-descending"/>
      <member name="gtk_discard"
              value="17"
              c:identifier="_Discard"
              glib:nick="gtk-discard"/>
      <member name="gtk_disconnect"
              value="18"
              c:identifier="_Disconnect"
              glib:nick="gtk-disconnect"/>
      <member name="gtk_go_down"
              value="26"
              c:identifier="_Down"
              glib:nick="gtk-go-down"/>
      <member name="gtk_edit"
              value="19"
              c:identifier="_Edit"
              glib:nick="gtk-edit"/>
      <member name="gtk_dialog_error"
              value="13"
              c:identifier="Error"
              glib:nick="gtk-dialog-error"/>
      <member name="gtk_execute"
              value="20"
              c:identifier="_Execute"
              glib:nick="gtk-execute"/>
      <member name="gtk_justify_fill"
              value="42"
              c:identifier="_Fill"
              glib:nick="gtk-justify-fill"/>
      <member name="gtk_find"
              value="21"
              c:identifier="_Find"
              glib:nick="gtk-find"/>
      <member name="gtk_find_and_replace"
              value="22"
              c:identifier="Find and _Replace"
              glib:nick="gtk-find-and-replace"/>
      <member name="gtk_goto_first"
              value="30"
              c:identifier="_First"
              glib:nick="gtk-goto-first"/>
      <member name="gtk_floppy"
              value="23"
              c:identifier="_Floppy"
              glib:nick="gtk-floppy"/>
      <member name="gtk_select_font"
              value="78"
              c:identifier="_Font"
              glib:nick="gtk-select-font"/>
      <member name="gtk_media_forward"
              value="46"
              c:identifier="_Forward"
              glib:nick="gtk-media-forward"/>
      <member name="gtk_go_forward"
              value="27"
              c:identifier="_Forward"
              glib:nick="gtk-go-forward"/>
      <member name="gtk_fullscreen"
              value="24"
              c:identifier="_Fullscreen"
              glib:nick="gtk-fullscreen"/>
      <member name="gtk_harddisk"
              value="33"
              c:identifier="_Harddisk"
              glib:nick="gtk-harddisk"/>
      <member name="gtk_help"
              value="34"
              c:identifier="_Help"
              glib:nick="gtk-help"/>
      <member name="gtk_home"
              value="35"
              c:identifier="_Home"
              glib:nick="gtk-home"/>
      <member name="gtk_indent"
              value="36"
              c:identifier="Increase Indent"
              glib:nick="gtk-indent"/>
      <member name="gtk_index"
              value="37"
              c:identifier="_Index"
              glib:nick="gtk-index"/>
      <member name="gtk_info"
              value="38"
              c:identifier="_Information"
              glib:nick="gtk-info"/>
      <member name="gtk_dialog_info"
              value="14"
              c:identifier="Information"
              glib:nick="gtk-dialog-info"/>
      <member name="gtk_italic"
              value="39"
              c:identifier="_Italic"
              glib:nick="gtk-italic"/>
      <member name="gtk_jump_to"
              value="40"
              c:identifier="_Jump to"
              glib:nick="gtk-jump-to"/>
      <member name="gtk_orientation_landscape"
              value="59"
              c:identifier="Landscape"
              glib:nick="gtk-orientation-landscape"/>
      <member name="gtk_goto_last"
              value="31"
              c:identifier="_Last"
              glib:nick="gtk-goto-last"/>
      <member name="gtk_leave_fullscreen"
              value="45"
              c:identifier="_Leave Fullscreen"
              glib:nick="gtk-leave-fullscreen"/>
      <member name="gtk_justify_left"
              value="43"
              c:identifier="_Left"
              glib:nick="gtk-justify-left"/>
      <member name="gtk_network"
              value="54"
              c:identifier="_Network"
              glib:nick="gtk-network"/>
      <member name="gtk_new"
              value="55"
              c:identifier="_New"
              glib:nick="gtk-new"/>
      <member name="gtk_media_next"
              value="47"
              c:identifier="_Next"
              glib:nick="gtk-media-next"/>
      <member name="gtk_no" value="56" c:identifier="_No" glib:nick="gtk-no"/>
      <member name="gtk_zoom_100"
              value="89"
              c:identifier="_Normal Size"
              glib:nick="gtk-zoom-100"/>
      <member name="gtk_ok" value="57" c:identifier="_OK" glib:nick="gtk-ok"/>
      <member name="gtk_open"
              value="58"
              c:identifier="_Open"
              glib:nick="gtk-open"/>
      <member name="gtk_page_setup"
              value="63"
              c:identifier="Page Set_up"
              glib:nick="gtk-page-setup"/>
      <member name="gtk_paste"
              value="64"
              c:identifier="_Paste"
              glib:nick="gtk-paste"/>
      <member name="gtk_media_pause"
              value="48"
              c:identifier="P_ause"
              glib:nick="gtk-media-pause"/>
      <member name="gtk_media_play"
              value="49"
              c:identifier="_Play"
              glib:nick="gtk-media-play"/>
      <member name="gtk_orientation_portrait"
              value="60"
              c:identifier="Portrait"
              glib:nick="gtk-orientation-portrait"/>
      <member name="gtk_preferences"
              value="65"
              c:identifier="_Preferences"
              glib:nick="gtk-preferences"/>
      <member name="gtk_media_previous"
              value="50"
              c:identifier="Pre_vious"
              glib:nick="gtk-media-previous"/>
      <member name="gtk_print"
              value="66"
              c:identifier="_Print"
              glib:nick="gtk-print"/>
      <member name="gtk_print_preview"
              value="67"
              c:identifier="Print Pre_view"
              glib:nick="gtk-print-preview"/>
      <member name="gtk_properties"
              value="68"
              c:identifier="_Properties"
              glib:nick="gtk-properties"/>
      <member name="gtk_dialog_question"
              value="15"
              c:identifier="Question"
              glib:nick="gtk-dialog-question"/>
      <member name="gtk_quit"
              value="69"
              c:identifier="_Quit"
              glib:nick="gtk-quit"/>
      <member name="gtk_media_record"
              value="51"
              c:identifier="_Record"
              glib:nick="gtk-media-record"/>
      <member name="gtk_redo"
              value="70"
              c:identifier="_Redo"
              glib:nick="gtk-redo"/>
      <member name="gtk_refresh"
              value="71"
              c:identifier="_Refresh"
              glib:nick="gtk-refresh"/>
      <member name="gtk_remove"
              value="72"
              c:identifier="_Remove"
              glib:nick="gtk-remove"/>
      <member name="gtk_orientation_reverse_landscape"
              value="61"
              c:identifier="Reverse landscape"
              glib:nick="gtk-orientation-reverse-landscape"/>
      <member name="gtk_orientation_reverse_portrait"
              value="62"
              c:identifier="Reverse portrait"
              glib:nick="gtk-orientation-reverse-portrait"/>
      <member name="gtk_revert_to_saved"
              value="73"
              c:identifier="_Revert"
              glib:nick="gtk-revert-to-saved"/>
      <member name="gtk_media_rewind"
              value="52"
              c:identifier="R_ewind"
              glib:nick="gtk-media-rewind"/>
      <member name="gtk_justify_right"
              value="44"
              c:identifier="_Right"
              glib:nick="gtk-justify-right"/>
      <member name="gtk_save"
              value="74"
              c:identifier="_Save"
              glib:nick="gtk-save"/>
      <member name="gtk_save_as"
              value="75"
              c:identifier="Save _As"
              glib:nick="gtk-save-as"/>
      <member name="gtk_select_all"
              value="76"
              c:identifier="Select _All"
              glib:nick="gtk-select-all"/>
      <member name="gtk_spell_check"
              value="81"
              c:identifier="_Spell Check"
              glib:nick="gtk-spell-check"/>
      <member name="gtk_stop"
              value="82"
              c:identifier="_Stop"
              glib:nick="gtk-stop"/>
      <member name="gtk_media_stop"
              value="53"
              c:identifier="_Stop"
              glib:nick="gtk-media-stop"/>
      <member name="gtk_strikethrough"
              value="83"
              c:identifier="_Strikethrough"
              glib:nick="gtk-strikethrough"/>
      <member name="gtk_goto_top"
              value="32"
              c:identifier="_Top"
              glib:nick="gtk-goto-top"/>
      <member name="gtk_undelete"
              value="84"
              c:identifier="_Undelete"
              glib:nick="gtk-undelete"/>
      <member name="gtk_underline"
              value="85"
              c:identifier="_Underline"
              glib:nick="gtk-underline"/>
      <member name="gtk_undo"
              value="86"
              c:identifier="_Undo"
              glib:nick="gtk-undo"/>
      <member name="gtk_go_up"
              value="28"
              c:identifier="_Up"
              glib:nick="gtk-go-up"/>
      <member name="gtk_dialog_warning"
              value="16"
              c:identifier="Warning"
              glib:nick="gtk-dialog-warning"/>
      <member name="gtk_yes"
              value="88"
              c:identifier="_Yes"
              glib:nick="gtk-yes"/>
      <member name="gtk_zoom_in"
              value="91"
              c:identifier="Zoom _In"
              glib:nick="gtk-zoom-in"/>
      <member name="gtk_zoom_out"
              value="92"
              c:identifier="Zoom _Out"
              glib:nick="gtk-zoom-out"/>
      <member name="gtk_color_picker"
              value="96"
              c:identifier="gtk-color-picker"
              glib:nick="gtk-color-picker"/>
      <member name="gtk_dialog_authentication"
              value="93"
              c:identifier="gtk-dialog-authentication"
              glib:nick="gtk-dialog-authentication"/>
      <member name="gtk_directory"
              value="97"
              c:identifier="gtk-directory"
              glib:nick="gtk-directory"/>
      <member name="gtk_dnd"
              value="94"
              c:identifier="gtk-dnd"
              glib:nick="gtk-dnd"/>
      <member name="gtk_dnd_multiple"
              value="95"
              c:identifier="gtk-dnd-multiple"
              glib:nick="gtk-dnd-multiple"/>
      <member name="gtk_file"
              value="98"
              c:identifier="gtk-file"
              glib:nick="gtk-file"/>
      <member name="gtk_missing_image"
              value="99"
              c:identifier="gtk-missing-image"
              glib:nick="gtk-missing-image"/>
    </enumeration>
    <callback name="StringFromValueFunc"
              c:type="GladeStringFromValueFunc"
              doc="For normal properties this is used to serialize
property values, for custom properties (only when new pspecs are
introduced) its needed for value comparisons in boxed pspecs
and also to update the UI for undo/redo items etc.">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="klass" transfer-ownership="none">
          <type name="PropertyClass" c:type="GladePropertyClass*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="fmt" transfer-ownership="none">
          <type name="ProjectFormat" c:type="GladeProjectFormat"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="SupportMask" c:type="GladeSupportMask">
      <member name="ok" value="0" c:identifier="GLADE_SUPPORT_OK"/>
      <member name="deprecated"
              value="1"
              c:identifier="GLADE_SUPPORT_DEPRECATED"/>
      <member name="mismatch" value="2" c:identifier="GLADE_SUPPORT_MISMATCH"/>
      <member name="libglade_unsupported"
              value="4"
              c:identifier="GLADE_SUPPORT_LIBGLADE_UNSUPPORTED"/>
      <member name="libglade_only"
              value="8"
              c:identifier="GLADE_SUPPORT_LIBGLADE_ONLY"/>
    </bitfield>
    <constant name="TAG_ACTION" value="action">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_ACTIONS" value="actions">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_ACTION_ACTIVATE_FUNCTION"
              value="action-activate-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_ACTION_SUBMENU_FUNCTION"
              value="action-submenu-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_ADAPTOR" value="adaptor">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_ADD_CHILD_FUNCTION" value="add-child-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_ATK_PROPERTY" value="atk-property">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_BOOK" value="book">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_BUILDER_SINCE" value="gtkbuilder-since">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_CHILD_ACTION_ACTIVATE_FUNCTION"
              value="child-action-activate-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_CHILD_GET_PROP_FUNCTION"
              value="child-get-property-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_CHILD_PROPERTY" value="child-property">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_CHILD_SET_PROP_FUNCTION"
              value="child-set-property-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_CHILD_VERIFY_FUNCTION" value="child-verify-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_COMMENT" value="comments">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_COMMON" value="common">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_CONSTRUCTOR_FUNCTION" value="constructor-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_CONSTRUCT_OBJECT_FUNCTION"
              value="construct-object-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_CONSTRUCT_ONLY" value="construct-only">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_CONTEXT" value="context">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_CREATE_EDITABLE_FUNCTION"
              value="create-editable-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_CREATE_EPROP_FUNCTION"
              value="create-editor-property-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_CREATE_TYPE" value="create-type">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_CUSTOM_LAYOUT" value="custom-layout">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_DEEP_POST_CREATE_FUNCTION"
              value="deep-post-create-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_DEFAULT" value="default">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_DEFAULT_HEIGHT" value="default-height">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_DEFAULT_PALETTE_STATE" value="default-palette-state">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_DEFAULT_WIDTH" value="default-width">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_DEPENDS" value="depends">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_DEPENDS_FUNCTION" value="depends-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_DEPRECATED" value="deprecated">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_DISABLED" value="disabled">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_DISPLAYABLE_VALUES" value="displayable-values">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_DOMAIN" value="domain">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_EDITABLE" value="editable">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_EVENT_HANDLER_CONNECTED" value="EventHandlerConnected">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_EXPANDED" value="expanded">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_FALSE" value="False">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_FIXED" value="fixed">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_GENERIC_NAME" value="generic-name">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_GET_CHILDREN_FUNCTION" value="get-children-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_GET_FUNCTION" value="get-property-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_GET_INTERNAL_CHILD_FUNCTION"
              value="get-internal-child-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_GET_TYPE_FUNCTION" value="get-type-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_GLADE_CATALOG" value="glade-catalog">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_GLADE_WIDGET_CLASS" value="glade-widget-class">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_GLADE_WIDGET_CLASSES" value="glade-widget-classes">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_GLADE_WIDGET_CLASS_REF" value="glade-widget-class-ref">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_GLADE_WIDGET_GROUP" value="glade-widget-group">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_GTKBUILDER" value="gtkbuilder">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_HAS_CONTEXT" value="context">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_ICON_NAME" value="icon-name">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_ICON_PREFIX" value="icon-prefix">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_ID" value="id">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_IGNORE" value="ignore">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_IMPORTANT" value="important">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_INIT_FUNCTION" value="init-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_KEY" value="key">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_LIBGLADE" value="libglade">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_LIBGLADE_ONLY" value="libglade-only">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_LIBGLADE_UNSUPPORTED" value="libglade-unsupported">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_LIBRARY" value="library">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_MAX_VALUE" value="max">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_MIN_VALUE" value="min">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_NAME" value="name">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_NEEDS_SYNC" value="needs-sync">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_NICK" value="nick">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_NO" value="No">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_OPTIONAL" value="optional">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_OPTIONAL_DEFAULT" value="optional-default">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_PACKING_ACTIONS" value="packing-actions">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_PACKING_DEFAULTS" value="packing-defaults">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_PACKING_PROPERTIES" value="packing-properties">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_PARAMETER" value="parameter">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_PARAMETERS" value="parameters">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_PARENT" value="parent">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_PARENTLESS_WIDGET" value="parentless-widget">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_PARENT_CLASS" value="parent-class">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_POST_CREATE_FUNCTION" value="post-create-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_PROJECT_CONVERT_FUNCTION"
              value="project-convert-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_PROPERTIES" value="properties">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_PROPERTY" value="property">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_QUERY" value="query">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_READ_CHILD_FUNCTION" value="read-child-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_READ_WIDGET_FUNCTION" value="read-widget-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_REMOVE_CHILD_FUNCTION" value="remove-child-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_REPLACE_CHILD_FUNCTION" value="replace-child-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_RESOURCE" value="resource">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_SAVE" value="save">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_SAVE_ALWAYS" value="save-always">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_SET_FUNCTION" value="set-property-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_SIGNAL" value="signal">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_SIGNALS" value="signals">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_SPEC" value="spec">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_SPECIAL_CHILD_TYPE" value="special-child-type">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_SPECIFICATIONS" value="parameter-spec">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_STOCK" value="stock">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_STOCK_ICON" value="stock-icon">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_STRING_FROM_VALUE_FUNCTION"
              value="string-from-value-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_SUPPORTS" value="supports">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_TARGETABLE" value="targetable">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_THEMED_ICON" value="themed-icon">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_TITLE" value="title">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_TOOLTIP" value="tooltip">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_TOPLEVEL" value="toplevel">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_TRANSFER_ON_PASTE" value="transfer-on-paste">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_TRANSLATABLE" value="translatable">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_TRUE" value="True">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_TYPE" value="type">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_USE_PLACEHOLDERS" value="use-placeholders">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_VALUE" value="value">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_VALUE_TYPE" value="value-type">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_VERIFY_FUNCTION" value="verify-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_VERSION" value="version">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_VERSION_SINCE" value="since">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_VISIBLE" value="visible">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_VISIBLE_LINES" value="visible-lines">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_WEIGHT" value="weight">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_WRITE_CHILD_FUNCTION" value="write-child-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_WRITE_WIDGET_FUNCTION" value="write-widget-function">
      <type name="utf8"/>
    </constant>
    <constant name="TAG_YES" value="Yes">
      <type name="utf8"/>
    </constant>
    <record name="TargetableVersion" c:type="GladeTargetableVersion">
      <field name="major" writable="1">
        <type name="int" c:type="gint"/>
      </field>
      <field name="minor" writable="1">
        <type name="int" c:type="gint"/>
      </field>
    </record>
    <enumeration name="UIMessageType" c:type="GladeUIMessageType">
      <member name="info" value="0" c:identifier="GLADE_UI_INFO"/>
      <member name="warn" value="1" c:identifier="GLADE_UI_WARN"/>
      <member name="error" value="2" c:identifier="GLADE_UI_ERROR"/>
      <member name="are_you_sure"
              value="3"
              c:identifier="GLADE_UI_ARE_YOU_SURE"/>
      <member name="yes_or_no" value="4" c:identifier="GLADE_UI_YES_OR_NO"/>
    </enumeration>
    <enumeration name="UtilFileDialogType" c:type="GladeUtilFileDialogType">
      <member name="open"
              value="0"
              c:identifier="GLADE_FILE_DIALOG_ACTION_OPEN"/>
      <member name="save"
              value="1"
              c:identifier="GLADE_FILE_DIALOG_ACTION_SAVE"/>
    </enumeration>
    <callback name="VerifyPropertyFunc"
              c:type="GladeVerifyPropertyFunc"
              doc="This delagate function is always called whenever setting any
properties with the exception of load time, and copy/paste time
(basicly the two places where we recreate a hierarchy that we
already know &quot;works&quot;) its basicly an optional backend provided
boundry checker for properties.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="object" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="property_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Widget"
           c:type="GladeWidget"
           parent="GObject.Object"
           glib:type-name="GladeWidget"
           glib:get-type="glade_widget_get_type"
           glib:type-struct="WidgetClass">
      <function name="get_from_gobject"
                c:identifier="glade_widget_get_from_gobject">
        <return-value transfer-ownership="full">
          <type name="Widget" c:type="GladeWidget*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="read" c:identifier="glade_widget_read">
        <return-value transfer-ownership="full">
          <type name="Widget" c:type="GladeWidget*"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
          <parameter name="internal" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="superuser"
                c:identifier="glade_widget_superuser"
                doc="Checks if we are in superuser mode.
Superuser mode is when we are
- Loading a project
- Dupping a widget recursively
- Rebuilding an instance for a construct-only property
In these cases, we must act like a load, this should be checked
from the plugin when implementing containers, when undo/redo comes
around, the plugin is responsable for maintaining the same container
size when widgets are added/removed.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="push_superuser"
                c:identifier="glade_widget_push_superuser"
                doc="Sets superuser mode">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="pop_superuser"
                c:identifier="glade_widget_pop_superuser"
                doc="Unsets superuser mode">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <virtual-method name="add_child">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_child">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="replace_child">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="event">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter transfer-ownership="none">
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="adaptor_create_internal"
              c:identifier="glade_widget_adaptor_create_internal"
              doc="A convenienve function to create a #GladeWidget of the prescribed type
for internal widgets.">
        <return-value transfer-ownership="full">
          <type name="Widget" c:type="GladeWidget*"/>
        </return-value>
        <parameters>
          <parameter name="internal_object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="internal_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="parent_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="anarchist"
                     transfer-ownership="none"
                     doc=" of the parent&apos;s hierarchy (like a popup window)">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="reason"
                     transfer-ownership="none"
                     doc=" was created (usually just pass the reason from the post_create function; note also this is used only by the plugin code so pass something usefull here).">
            <type name="CreateReason" c:type="GladeCreateReason"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_child"
              c:identifier="glade_widget_add_child"
              doc="Adds @child to @parent in a generic way for this #GladeWidget parent.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="at_mouse"
                     transfer-ownership="none"
                     doc=" at the current mouse position">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_child"
              c:identifier="glade_widget_remove_child"
              doc="Removes @child from @parent in a generic way for this #GladeWidget parent.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace"
              c:identifier="glade_widget_replace"
              doc="Replaces a GObject with another GObject inside a GObject which
behaves as a container.
Note that both GObjects must be owned by a GladeWidget.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="old_object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="new_object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rebuild"
              c:identifier="glade_widget_rebuild"
              doc="Replaces the current widget instance with
a new one while preserving all properties children and
takes care of reparenting.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="dup"
              c:identifier="glade_widget_dup"
              doc="Creates a deep copy of #GladeWidget. if @exact is specified,
the widget name is preserved and signals are carried over
(this is used to maintain names &amp; signals in Cut/Paste context
as opposed to Copy/Paste contexts).">
        <return-value transfer-ownership="full">
          <type name="Widget" c:type="GladeWidget*"/>
        </return-value>
        <parameters>
          <parameter name="exact" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_signal_list"
              c:identifier="glade_widget_get_signal_list"
              doc="Compiles a list of #GladeSignal elements
must call g_list_free() to free the list.">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="copy_signals"
              c:identifier="glade_widget_copy_signals"
              doc="Sets signals in @widget based on the values of
matching signals in @template_widget">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="template_widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_properties"
              c:identifier="glade_widget_copy_properties"
              doc="Sets properties in @widget based on the values of
matching properties in @template_widget">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="template_widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="copy_parentless" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="exact" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_packing_properties"
              c:identifier="glade_widget_set_packing_properties"
              doc="Generates the packing_properties list of the widget, given
the class of the container we are adding the widget to.
If the widget already has packing_properties, but the container
has changed, the current list is freed and replaced.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property" c:identifier="glade_widget_get_property">
        <return-value transfer-ownership="full">
          <type name="Property" c:type="GladeProperty*"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pack_property"
              c:identifier="glade_widget_get_pack_property">
        <return-value transfer-ownership="full">
          <type name="Property" c:type="GladeProperty*"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_properties"
              c:identifier="glade_widget_dup_properties"
              doc="Copies a list of properties, if @as_load is specified, then
properties that are not saved to the glade file are ignored.">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
        <parameters>
          <parameter name="template_props" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*"/>
          </parameter>
          <parameter name="as_load" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="copy_parentless" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="exact" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_property"
              c:identifier="glade_widget_remove_property"
              doc="Removes the #GladeProperty indicated by @id_property
from @widget (this is intended for use in the plugin, to
remove properties from composite children that dont make
sence to allow the user to specify, notably - properties
that are proxied through the composite widget&apos;s properties or
style properties).">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show"
              c:identifier="glade_widget_show"
              doc="Display @widget in it&apos;s project&apos;s GladeDesignView">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="hide" c:identifier="glade_widget_hide" doc="Hide @widget">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="add_signal_handler"
              c:identifier="glade_widget_add_signal_handler"
              doc="Adds a signal handler for @widget">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="signal_handler" transfer-ownership="none">
            <type name="Signal" c:type="GladeSignal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_signal_handler"
              c:identifier="glade_widget_remove_signal_handler"
              doc="Removes a signal handler from @widget">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="signal_handler" transfer-ownership="none">
            <type name="Signal" c:type="GladeSignal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="change_signal_handler"
              c:identifier="glade_widget_change_signal_handler"
              doc="Changes a #GladeSignal on @widget">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="old_signal_handler" transfer-ownership="none">
            <type name="Signal" c:type="GladeSignal*"/>
          </parameter>
          <parameter name="new_signal_handler" transfer-ownership="none">
            <type name="Signal" c:type="GladeSignal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_signal_handlers"
              c:identifier="glade_widget_list_signal_handlers">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
        <parameters>
          <parameter name="signal_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_decendant" c:identifier="glade_widget_has_decendant">
        <return-value transfer-ownership="none"
                      doc=" or any decendants that implement the @type interface">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="event"
              c:identifier="glade_widget_event"
              doc="Feed an event to be handled on the project GladeWidget
hierarchy.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="placeholder_relation"
              c:identifier="glade_widget_placeholder_relation"
              doc="Returns whether placeholders should be used
in operations concerning this parent &amp; child.
Currently that criteria is whether @parent is a
GtkContainer, @widget is a GtkWidget and the parent
adaptor has been marked to use placeholders.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_action"
              c:identifier="glade_widget_get_action"
              doc="Returns a #GladeWidgetAction object indentified by @action_path.">
        <return-value transfer-ownership="full">
          <type name="WidgetAction" c:type="GladeWidgetAction*"/>
        </return-value>
        <parameters>
          <parameter name="action_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pack_action"
              c:identifier="glade_widget_get_pack_action"
              doc="Returns a #GladeWidgetAction object indentified by @action_path.">
        <return-value transfer-ownership="full">
          <type name="WidgetAction" c:type="GladeWidgetAction*"/>
        </return-value>
        <parameters>
          <parameter name="action_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_action_sensitive"
              c:identifier="glade_widget_set_action_sensitive"
              doc="Sets the sensitivity of @action_path in @widget">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="action_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="sensitive" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pack_action_sensitive"
              c:identifier="glade_widget_set_pack_action_sensitive"
              doc="Sets the sensitivity of @action_path in @widget">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="action_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="sensitive" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_action"
              c:identifier="glade_widget_remove_action"
              doc="Remove an action.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_pack_action"
              c:identifier="glade_widget_remove_pack_action"
              doc="Remove a packing action.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write"
              c:identifier="glade_widget_write"
              doc="Recursively writes out @widget and its children
and appends the created #GladeXmlNode to @node.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="XmlContext" c:type="GladeXmlContext*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_child"
              c:identifier="glade_widget_write_child"
              doc="Writes out a widget to the xml, takes care
of packing properties and special child types.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="XmlContext" c:type="GladeXmlContext*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_signals" c:identifier="glade_widget_write_signals">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="XmlContext" c:type="GladeXmlContext*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_placeholder"
              c:identifier="glade_widget_write_placeholder"
              doc="Writes out a placeholder to the xml">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="XmlContext" c:type="GladeXmlContext*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_child"
              c:identifier="glade_widget_read_child"
              doc="Reads in a child widget from the xml (handles &apos;child&apos; tag)">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_special_child_prop"
              c:identifier="glade_widget_write_special_child_prop">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="XmlContext" c:type="GladeXmlContext*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_type_from_node"
              c:identifier="glade_widget_set_child_type_from_node">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_editor_property"
              c:identifier="glade_widget_create_editor_property"
              doc="This is a convenience function to create a GladeEditorProperty corresponding
to @property">
        <return-value transfer-ownership="full">
          <type name="EditorProperty" c:type="GladeEditorProperty*"/>
        </return-value>
        <parameters>
          <parameter name="property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="packing" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="use_command" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_path_name"
              c:identifier="glade_widget_generate_path_name"
              doc="Creates a user friendly name to describe project widgets">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="add_prop_ref"
              c:identifier="glade_widget_add_prop_ref"
              doc="Adds @property to @widget &apos;s list of referenced properties.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property" transfer-ownership="none">
            <type name="Property" c:type="GladeProperty*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_prop_ref"
              c:identifier="glade_widget_remove_prop_ref"
              doc="Removes @property from @widget &apos;s list of referenced properties.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property" transfer-ownership="none">
            <type name="Property" c:type="GladeProperty*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parentless_widget_ref"
              c:identifier="glade_widget_get_parentless_widget_ref">
        <return-value transfer-ownership="full">
          <type name="Property" c:type="GladeProperty*"/>
        </return-value>
      </method>
      <method name="get_parentless_reffed_widgets"
              c:identifier="glade_widget_get_parentless_reffed_widgets">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="object_set_property"
              c:identifier="glade_widget_object_set_property"
              doc="This function applies @value to the property @property_name on
the runtime object of @widget.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="object_get_property"
              c:identifier="glade_widget_object_get_property"
              doc="This function retrieves the value of the property @property_name on
the runtime object of @widget and sets it in @value.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_set_property"
              c:identifier="glade_widget_child_set_property"
              doc="Sets @child&apos;s packing property identified by @property_name to @value.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_get_property"
              c:identifier="glade_widget_child_get_property"
              doc="Gets @child&apos;s packing property identified by @property_name.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="property_get"
              c:identifier="glade_widget_property_get"
              doc="Gets the value of @id_property in @widget">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="property_set"
              c:identifier="glade_widget_property_set"
              doc="Sets the value of @id_property in @widget">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="pack_property_get"
              c:identifier="glade_widget_pack_property_get"
              doc="Gets the value of @id_property in @widget packing properties">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="pack_property_set"
              c:identifier="glade_widget_pack_property_set"
              doc="Sets the value of @id_property in @widget packing properties">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="property_reset"
              c:identifier="glade_widget_property_reset"
              doc="Resets @id_property in @widget to it&apos;s default value">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_property_reset"
              c:identifier="glade_widget_pack_property_reset"
              doc="Resets @id_property in @widget&apos;s packing properties to it&apos;s default value">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="property_default"
              c:identifier="glade_widget_property_default"
              doc="currently set to it&apos;s default value.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="property_original_default"
              c:identifier="glade_widget_property_original_default"
              doc="currently set to it&apos;s original default value.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_property_default"
              c:identifier="glade_widget_pack_property_default"
              doc="currently set to it&apos;s default value.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="property_set_sensitive"
              c:identifier="glade_widget_property_set_sensitive"
              doc="Sets the sensitivity of @id_property in @widget">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="sensitive" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="reason"
                     transfer-ownership="none"
                     doc=" which will be used as a tooltip">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_property_set_sensitive"
              c:identifier="glade_widget_pack_property_set_sensitive"
              doc="Sets the sensitivity of @id_property in @widget&apos;s packing properties.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="sensitive" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="reason"
                     transfer-ownership="none"
                     doc=" which will be used as a tooltip">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="property_set_enabled"
              c:identifier="glade_widget_property_set_enabled"
              doc="Sets the enabled state of @id_property in @widget; this is
used for optional properties.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_property_set_enabled"
              c:identifier="glade_widget_pack_property_set_enabled"
              doc="Sets the enabled state of @id_property in @widget&apos;s packing
properties; this is used for optional properties.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="property_set_save_always"
              c:identifier="glade_widget_property_set_save_always"
              doc="Sets whether @id_property in @widget should be special cased
to always be saved regardless of its default value.
(used for some special cases like properties
that are assigned initial values in composite widgets
or derived widget code).">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="setting" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_property_set_save_always"
              c:identifier="glade_widget_pack_property_set_save_always"
              doc="Sets whether @id_property in @widget should be special cased
to always be saved regardless of its default value.
(used for some special cases like properties
that are assigned initial values in composite widgets
or derived widget code).">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="setting" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="property_string"
              c:identifier="glade_widget_property_string"
              doc="Creates a printable string representing @id_property in
of @id_property&apos;s real value (this is a convinience
function to print/debug properties usually from plugin
backends).">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_property_string"
              c:identifier="glade_widget_pack_property_string"
              doc="Same as glade_widget_property_string() but for packing
properties.">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="id_property" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="glade_widget_set_name"
              doc="Sets @widget&apos;s name to @name.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="glade_widget_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="set_internal"
              c:identifier="glade_widget_set_internal"
              doc="Sets the internal name of @widget to @internal">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="internal" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_internal" c:identifier="glade_widget_get_internal">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="set_object"
              c:identifier="glade_widget_set_object"
              doc="Set the runtime object for this GladeWidget wrapper
(this is used deep in the core and is probably unsafe
to use elsewhere).">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new_object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object" c:identifier="glade_widget_get_object">
        <return-value transfer-ownership="full">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="set_project"
              c:identifier="glade_widget_set_project"
              doc="Makes @widget belong to @project.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="project" transfer-ownership="none">
            <type name="Project" c:type="GladeProject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_project" c:identifier="glade_widget_get_project">
        <return-value transfer-ownership="full">
          <type name="Project" c:type="GladeProject*"/>
        </return-value>
      </method>
      <method name="get_adaptor" c:identifier="glade_widget_get_adaptor">
        <return-value transfer-ownership="full">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </return-value>
      </method>
      <method name="get_parent" c:identifier="glade_widget_get_parent">
        <return-value transfer-ownership="full">
          <type name="Widget" c:type="GladeWidget*"/>
        </return-value>
      </method>
      <method name="set_parent"
              c:identifier="glade_widget_set_parent"
              doc="sets the parenting #GladeWidget">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_children"
              c:identifier="glade_widget_get_children"
              doc="Fetches any wrapped children of @widget.
&lt;note&gt;&lt;para&gt;This differs from a direct call to glade_widget_adaptor_get_children() as
it only returns children which have an associated GladeWidget. This function will
not return any placeholders or internal composite children that have not been
exposed for Glade configuration&lt;/para&gt;&lt;/note&gt;">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="get_toplevel" c:identifier="glade_widget_get_toplevel">
        <return-value transfer-ownership="full">
          <type name="Widget" c:type="GladeWidget*"/>
        </return-value>
      </method>
      <method name="set_support_warning"
              c:identifier="glade_widget_set_support_warning">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="warning" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lock"
              c:identifier="glade_widget_lock"
              doc="Sets @locked to be in a locked up state
spoken for by @widget, locked widgets cannot
be removed from the project until unlocked.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="locked" transfer-ownership="none">
            <type name="Widget" c:type="GladeWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unlock"
              c:identifier="glade_widget_unlock"
              doc="Unlocks @widget so that it can be removed
from the project again">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="support_changed"
              c:identifier="glade_widget_support_changed"
              doc="Notifies that support metadata has changed on the widget.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="adaptor" writable="1" construct-only="1">
        <type name="GObjectAdaptor" c:type="GladeGObjectAdaptor"/>
      </property>
      <property name="anarchist" writable="1" construct-only="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="internal" writable="1" construct="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="internal-name"
                readable="0"
                writable="1"
                construct-only="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="name" writable="1" construct="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="object" writable="1" construct="1">
        <type name="GObject.Object" c:type="GObject"/>
      </property>
      <property name="parent" writable="1" construct="1">
        <type name="Widget" c:type="GladeWidget"/>
      </property>
      <property name="project" writable="1" construct="1">
        <type name="Project" c:type="GladeProject"/>
      </property>
      <property name="properties" writable="1" construct-only="1">
        <type name="any" c:type="gpointer"/>
      </property>
      <property name="reason" readable="0" writable="1" construct-only="1">
        <type name="int" c:type="gint"/>
      </property>
      <property name="support-warning">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="template" readable="0" writable="1" construct-only="1">
        <type name="Widget" c:type="GladeWidget"/>
      </property>
      <property name="template-exact"
                readable="0"
                writable="1"
                construct-only="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="toplevel-height" writable="1">
        <type name="int" c:type="gint"/>
      </property>
      <property name="toplevel-width" writable="1">
        <type name="int" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="adaptor">
        <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
      </field>
      <field name="project">
        <type name="Project" c:type="GladeProject*"/>
      </field>
      <field name="parent">
        <type name="Widget" c:type="GladeWidget*"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="support_warning">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="internal">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="anarchist">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="object">
        <type name="GObject.Object" c:type="GObject*"/>
      </field>
      <field name="properties">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="packing_properties">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="props_hash">
        <type name="GLib.HashTable" c:type="GHashTable*"/>
      </field>
      <field name="pack_props_hash">
        <type name="GLib.HashTable" c:type="GHashTable*"/>
      </field>
      <field name="signals">
        <type name="GLib.HashTable" c:type="GHashTable*"/>
      </field>
      <field name="visible">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="prop_refs">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="width">
        <type name="int" c:type="gint"/>
      </field>
      <field name="height">
        <type name="int" c:type="gint"/>
      </field>
      <field name="actions">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="packing_actions">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="lock">
        <type name="Widget" c:type="GladeWidget*"/>
      </field>
      <field name="locked_widgets">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="construct_template">
        <type name="Widget" c:type="GladeWidget*"/>
      </field>
      <field name="construct_reason">
        <type name="CreateReason" c:type="GladeCreateReason"/>
      </field>
      <field name="construct_internal">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="construct_exact">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <glib:signal name="add-signal-handler">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="button-press-event">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event" c:type="GdkEvent"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="button-release-event">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event" c:type="GdkEvent"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="change-signal-handler">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="motion-notify-event">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event" c:type="GdkEvent"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="remove-signal-handler">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="support-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <class name="WidgetAction"
           c:type="GladeWidgetAction"
           parent="GObject.Object"
           glib:type-name="GladeWidgetAction"
           glib:get-type="glade_widget_action_get_type"
           glib:type-struct="WidgetActionClass">
      <function name="class_free"
                c:identifier="glade_widget_action_class_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <type name="GWActionClass" c:type="GWActionClass*"/>
          </parameter>
        </parameters>
      </function>
      <function name="class_clone"
                c:identifier="glade_widget_action_class_clone">
        <return-value transfer-ownership="full">
          <type name="GWActionClass" c:type="GWActionClass*"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <type name="GWActionClass" c:type="GWActionClass*"/>
          </parameter>
        </parameters>
      </function>
      <method name="remove"
              c:identifier="glade_widget_action_remove"
              doc="Remove an action.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="WidgetAction" c:type="GladeWidgetAction*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sensitive"
              c:identifier="glade_widget_action_set_sensitive"
              doc="Set whether or not this action is sensitive.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sensitive" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="class" readable="0" writable="1" construct-only="1">
        <type name="any" c:type="gpointer"/>
      </property>
      <property name="sensitive" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="klass">
        <type name="GWActionClass" c:type="GWActionClass*"/>
      </field>
      <field name="sensitive">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="actions">
        <type name="GLib.List" c:type="GList*"/>
      </field>
    </class>
    <record name="WidgetActionClass"
            c:type="GladeWidgetActionClass"
            glib:is-gtype-struct-for="WidgetAction">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="WidgetAdaptor" c:type="GladeWidgetAdaptor">
      <field name="parent_instance" writable="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="type" writable="1">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="generic_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="icon_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="missing_icon" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="title" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="properties" writable="1">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="packing_props" writable="1">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="signals" writable="1">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="child_packings" writable="1">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="actions" writable="1">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="packing_actions" writable="1">
        <type name="GLib.List" c:type="GList*"/>
      </field>
      <field name="priv" writable="1">
        <type name="WidgetAdaptorPrivate" c:type="GladeWidgetAdaptorPrivate*"/>
      </field>
    </record>
    <record name="WidgetAdaptorClass" c:type="GladeWidgetAdaptorClass">
      <field name="parent_class" writable="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="version_since_major" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="version_since_minor" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="builder_since_major" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="builder_since_minor" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="deprecated" writable="1" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="libglade_unsupported" writable="1" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="libglade_only" writable="1" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="fixed" writable="1" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="toplevel" writable="1" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="use_placeholders" writable="1" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="scrollable" writable="1" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="default_width" writable="1">
        <type name="int" c:type="gint"/>
      </field>
      <field name="default_height" writable="1">
        <type name="int" c:type="gint"/>
      </field>
      <field name="construct_object" writable="1">
        <type name="ConstructObjectFunc" c:type="GladeConstructObjectFunc"/>
      </field>
      <field name="deep_post_create" writable="1">
        <type name="PostCreateFunc" c:type="GladePostCreateFunc"/>
      </field>
      <field name="post_create" writable="1">
        <type name="PostCreateFunc" c:type="GladePostCreateFunc"/>
      </field>
      <field name="get_internal_child" writable="1">
        <type name="GetInternalFunc" c:type="GladeGetInternalFunc"/>
      </field>
      <field name="verify_property" writable="1">
        <type name="VerifyPropertyFunc" c:type="GladeVerifyPropertyFunc"/>
      </field>
      <field name="set_property" writable="1">
        <type name="SetPropertyFunc" c:type="GladeSetPropertyFunc"/>
      </field>
      <field name="get_property" writable="1">
        <type name="GetPropertyFunc" c:type="GladeGetPropertyFunc"/>
      </field>
      <field name="add" writable="1">
        <type name="AddChildFunc" c:type="GladeAddChildFunc"/>
      </field>
      <field name="remove" writable="1">
        <type name="RemoveChildFunc" c:type="GladeRemoveChildFunc"/>
      </field>
      <field name="get_children" writable="1">
        <type name="GetChildrenFunc" c:type="GladeGetChildrenFunc"/>
      </field>
      <field name="child_verify_property" writable="1">
        <type name="ChildVerifyPropertyFunc"
              c:type="GladeChildVerifyPropertyFunc"/>
      </field>
      <field name="child_set_property" writable="1">
        <type name="ChildSetPropertyFunc" c:type="GladeChildSetPropertyFunc"/>
      </field>
      <field name="child_get_property" writable="1">
        <type name="ChildGetPropertyFunc" c:type="GladeChildGetPropertyFunc"/>
      </field>
      <field name="replace_child" writable="1">
        <type name="ReplaceChildFunc" c:type="GladeReplaceChildFunc"/>
      </field>
      <field name="action_activate" writable="1">
        <type name="ActionActivateFunc" c:type="GladeActionActivateFunc"/>
      </field>
      <field name="child_action_activate" writable="1">
        <type name="ChildActionActivateFunc"
              c:type="GladeChildActionActivateFunc"/>
      </field>
      <field name="action_submenu" writable="1">
        <type name="ActionSubmenuFunc" c:type="GladeActionSubmenuFunc"/>
      </field>
      <field name="depends" writable="1">
        <type name="DependsFunc" c:type="GladeDependsFunc"/>
      </field>
      <field name="read_widget" writable="1">
        <type name="ReadWidgetFunc" c:type="GladeReadWidgetFunc"/>
      </field>
      <field name="write_widget" writable="1">
        <type name="WriteWidgetFunc" c:type="GladeWriteWidgetFunc"/>
      </field>
      <field name="read_child" writable="1">
        <type name="ReadWidgetFunc" c:type="GladeReadWidgetFunc"/>
      </field>
      <field name="write_child" writable="1">
        <type name="WriteWidgetFunc" c:type="GladeWriteWidgetFunc"/>
      </field>
      <field name="create_eprop" writable="1">
        <type name="CreateEPropFunc" c:type="GladeCreateEPropFunc"/>
      </field>
      <field name="string_from_value" writable="1">
        <type name="StringFromValueFunc" c:type="GladeStringFromValueFunc"/>
      </field>
      <field name="create_editable" writable="1">
        <type name="CreateEditableFunc" c:type="GladeCreateEditableFunc"/>
      </field>
    </record>
    <record name="WidgetAdaptorPrivate" c:type="GladeWidgetAdaptorPrivate">
    </record>
    <record name="WidgetClass"
            c:type="GladeWidgetClass"
            glib:is-gtype-struct-for="Widget">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="add_child">
        <callback name="add_child" c:type="add_child">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="boolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_child">
        <callback name="remove_child" c:type="remove_child">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="replace_child">
        <callback name="replace_child" c:type="replace_child">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_signal_handler">
        <callback name="add_signal_handler" c:type="add_signal_handler">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Signal" c:type="GladeSignal*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_signal_handler">
        <callback name="remove_signal_handler" c:type="remove_signal_handler">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Signal" c:type="GladeSignal*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="change_signal_handler">
        <callback name="change_signal_handler" c:type="change_signal_handler">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Signal" c:type="GladeSignal*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Signal" c:type="GladeSignal*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="button_press_event">
        <callback name="button_press_event" c:type="button_press_event">
          <return-value transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Gdk.Event" c:type="GdkEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="button_release_event">
        <callback name="button_release_event" c:type="button_release_event">
          <return-value transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Gdk.Event" c:type="GdkEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="motion_notify_event">
        <callback name="motion_notify_event" c:type="motion_notify_event">
          <return-value transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Gdk.Event" c:type="GdkEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="event">
        <callback name="event" c:type="event">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="Widget" c:type="GladeWidget*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="Gdk.Event" c:type="GdkEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="WidgetGroup" c:type="GladeWidgetGroup">
      <method name="get_name" c:identifier="glade_widget_group_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_title" c:identifier="glade_widget_group_get_title">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_expanded"
              c:identifier="glade_widget_group_get_expanded">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_adaptors"
              c:identifier="glade_widget_group_get_adaptors">
        <return-value transfer-ownership="none">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
    </record>
    <callback name="WriteWidgetFunc"
              c:type="GladeWriteWidgetFunc"
              doc="This function is called to fill in @node from @widget.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GladeWidget*"/>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <type name="XmlContext" c:type="GladeXmlContext*"/>
        </parameter>
        <parameter name="node" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="XML_TAG_AFTER" value="after">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_BUILDER_PROJECT" value="interface">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_BUILDER_WIDGET" value="object">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_CHILD" value="child">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_CLASS" value="class">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_FILENAME" value="filename">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_HANDLER" value="handler">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_I18N_TRUE" value="yes">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_ID" value="id">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_INTERNAL_CHILD" value="internal-child">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_LIB" value="lib">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_LIBGLADE_PROJECT" value="glade-interface">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_LIBGLADE_WIDGET" value="widget">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_NAME" value="name">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_OBJECT" value="object">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_PACKING" value="packing">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_PLACEHOLDER" value="placeholder">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_PROPERTY" value="property">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_REQUIRES" value="requires">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_SIGNAL" value="signal">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_SIGNAL_FALSE" value="no">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_SIGNAL_TRUE" value="yes">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_SOURCE" value="source">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_SOURCES" value="sources">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_STOCK_ID" value="stock-id">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_SWAPPED" value="swapped">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_TYPE" value="type">
      <type name="utf8"/>
    </constant>
    <constant name="XML_TAG_VERSION" value="version">
      <type name="utf8"/>
    </constant>
    <record name="XmlContext" c:type="GladeXmlContext">
      <constructor name="new" c:identifier="glade_xml_context_new">
        <return-value transfer-ownership="full">
          <type name="XmlContext" c:type="GladeXmlContext*"/>
        </return-value>
        <parameters>
          <parameter name="doc" transfer-ownership="none">
            <type name="XmlDoc" c:type="GladeXmlDoc*"/>
          </parameter>
          <parameter name="name_space" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_path"
                   c:identifier="glade_xml_context_new_from_path">
        <return-value transfer-ownership="full">
          <type name="XmlContext" c:type="GladeXmlContext*"/>
        </return-value>
        <parameters>
          <parameter name="full_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="nspace" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="root_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="destroy" c:identifier="glade_xml_context_destroy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="free"
              c:identifier="glade_xml_context_free"
              doc="Similar to glade_xml_context_destroy but it also frees the document set in the context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_doc" c:identifier="glade_xml_context_get_doc">
        <return-value transfer-ownership="full">
          <type name="XmlDoc" c:type="GladeXmlDoc*"/>
        </return-value>
      </method>
    </record>
    <record name="XmlDoc" c:type="GladeXmlDoc">
      <constructor name="new" c:identifier="glade_xml_doc_new">
        <return-value transfer-ownership="full">
          <type name="XmlDoc" c:type="GladeXmlDoc*"/>
        </return-value>
      </constructor>
      <method name="get_root" c:identifier="glade_xml_doc_get_root">
        <return-value transfer-ownership="full">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </return-value>
      </method>
      <method name="set_root" c:identifier="glade_xml_doc_set_root">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="glade_xml_doc_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="save" c:identifier="glade_xml_doc_save">
        <return-value transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="full_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="XmlNode" c:type="GladeXmlNode">
      <constructor name="new" c:identifier="glade_xml_node_new">
        <return-value transfer-ownership="full">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="XmlContext" c:type="GladeXmlContext*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_comment"
                   c:identifier="glade_xml_node_new_comment">
        <return-value transfer-ownership="full">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="XmlContext" c:type="GladeXmlContext*"/>
          </parameter>
          <parameter name="comment" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_property_string"
              c:identifier="glade_xml_node_set_property_string">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="string" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_boolean"
              c:identifier="glade_xml_node_set_property_boolean">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="glade_xml_node_delete">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_children" c:identifier="glade_xml_node_get_children">
        <return-value transfer-ownership="full">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </return-value>
      </method>
      <method name="get_parent" c:identifier="glade_xml_node_get_parent">
        <return-value transfer-ownership="full">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </return-value>
      </method>
      <method name="next" c:identifier="glade_xml_node_next">
        <return-value transfer-ownership="full">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </return-value>
      </method>
      <method name="verify"
              c:identifier="glade_xml_node_verify"
              doc="This is a wrapper around glade_xml_node_verify_silent(), only it emits
a g_warning() if @node_in has a name different than @name.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify_silent" c:identifier="glade_xml_node_verify_silent">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="glade_xml_node_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="append_child" c:identifier="glade_xml_node_append_child">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="XmlNode" c:type="GladeXmlNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="glade_xml_node_remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="is_comment" c:identifier="glade_xml_node_is_comment">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="next_with_comments"
              c:identifier="glade_xml_node_next_with_comments">
        <return-value transfer-ownership="full">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </return-value>
      </method>
      <method name="get_children_with_comments"
              c:identifier="glade_xml_node_get_children_with_comments">
        <return-value transfer-ownership="full">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </return-value>
      </method>
    </record>
    <function name="boolean_handled_accumulator"
              c:identifier="glade_boolean_handled_accumulator">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ihint" transfer-ownership="none">
          <type name="GObject.SignalInvocationHint"
                c:type="GSignalInvocationHint*"/>
        </parameter>
        <parameter name="return_accu" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="handler_return" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="dummy" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="catalog_destroy_all"
              c:identifier="glade_catalog_destroy_all">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="catalog_is_loaded" c:identifier="glade_catalog_is_loaded">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="catalog_load_all" c:identifier="glade_catalog_load_all">
      <return-value transfer-ownership="none">
        <type name="GLib.List" c:type="GList*"/>
      </return-value>
    </function>
    <function name="cursor_get_add_widget_pixbuf"
              c:identifier="glade_cursor_get_add_widget_pixbuf">
      <return-value transfer-ownership="none">
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
    </function>
    <function name="cursor_init"
              c:identifier="glade_cursor_init"
              doc="Initializes cursors for use with glade_cursor_set().">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="cursor_set"
              c:identifier="glade_cursor_set"
              doc="Sets the cursor for @window to something appropriate based on @type.
(also sets the cursor on all visible project widgets)">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="CursorType" c:type="GladeCursorType"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_displayable_value"
              c:identifier="glade_get_displayable_value">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_value_from_displayable"
              c:identifier="glade_get_value_from_displayable">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="displayabe" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="integer_handled_accumulator"
              c:identifier="glade_integer_handled_accumulator">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ihint" transfer-ownership="none">
          <type name="GObject.SignalInvocationHint"
                c:type="GSignalInvocationHint*"/>
        </parameter>
        <parameter name="return_accu" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="handler_return" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="dummy" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_objects"
              c:identifier="glade_param_spec_objects">
      <return-value transfer-ownership="full">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="accepted_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_objects_get_type"
              c:identifier="glade_param_spec_objects_get_type">
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <type name="ParamSpecObjects" c:type="GladeParamSpecObjects*"/>
        </parameter>
      </parameters>
    </function>
    <function name="parameter_get_boolean"
              c:identifier="glade_parameter_get_boolean"
              doc="Searches through @parameters looking for a #GladeParameter named @key. If
found, it stores a #gboolean representation of its value into @value.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parameters" transfer-ownership="none">
          <type name="GLib.List" c:type="GList*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" direction="out" transfer-ownership="full">
          <type name="boolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="parameter_get_float"
              c:identifier="glade_parameter_get_float"
              doc="Searches through @parameters looking for a #GladeParameter named @key. If
found, it stores a #gfloat representation of its value into @value.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parameters" transfer-ownership="none">
          <type name="GLib.List" c:type="GList*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" direction="out" transfer-ownership="full">
          <type name="float" c:type="gfloat*"/>
        </parameter>
      </parameters>
    </function>
    <function name="parameter_get_integer"
              c:identifier="glade_parameter_get_integer"
              doc="Searches through @parameters looking for a #GladeParameter named @key. If
found, it stores a #gint representation of its value into @value.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parameters" transfer-ownership="none">
          <type name="GLib.List" c:type="GList*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" direction="out" transfer-ownership="full">
          <type name="int" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="parameter_get_string"
              c:identifier="glade_parameter_get_string"
              doc="Searches through @parameters looking for a #GladeParameter named @key. If
found, it stores a newly copied string representation of its value into">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parameters" transfer-ownership="none">
          <type name="GLib.List" c:type="GList*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="parameter_list_new_from_node"
              c:identifier="glade_parameter_list_new_from_node"
              doc="Returns:">
      <return-value transfer-ownership="full">
        <type name="GLib.List" c:type="GList*"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <type name="GLib.List" c:type="GList*"/>
        </parameter>
        <parameter name="node" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
      </parameters>
    </function>
    <function name="popup_is_popup_event"
              c:identifier="glade_popup_is_popup_event">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <type name="Gdk.EventButton" c:type="GdkEventButton*"/>
        </parameter>
      </parameters>
    </function>
    <function name="popup_simple_pop" c:identifier="glade_popup_simple_pop">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <type name="Gdk.EventButton" c:type="GdkEventButton*"/>
        </parameter>
      </parameters>
    </function>
    <function name="register_displayable_value"
              c:identifier="glade_register_displayable_value">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="string" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="register_translated_value"
              c:identifier="glade_register_translated_value">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="string" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="setup_log_handlers"
              c:identifier="glade_setup_log_handlers"
              doc="Sets up a log handler to manage all %G_LOG_LEVEL_MASK errors of domain:
GLib, GLib-GObject, Gtk, Gdk, and domainless.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="signal_read"
              c:identifier="glade_signal_read"
              doc="Reads and creates a ner #GladeSignal based on @node">
      <return-value transfer-ownership="full">
        <type name="Signal" c:type="GladeSignal*"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
      </parameters>
    </function>
    <function name="single_object_accumulator"
              c:identifier="glade_single_object_accumulator">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ihint" transfer-ownership="none">
          <type name="GObject.SignalInvocationHint"
                c:type="GSignalInvocationHint*"/>
        </parameter>
        <parameter name="return_accu" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="handler_return" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="dummy" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="standard_boolean_spec"
              c:identifier="glade_standard_boolean_spec">
      <return-value transfer-ownership="full">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
    </function>
    <function name="standard_float_spec"
              c:identifier="glade_standard_float_spec">
      <return-value transfer-ownership="full">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
    </function>
    <function name="standard_gdkcolor_spec"
              c:identifier="glade_standard_gdkcolor_spec">
      <return-value transfer-ownership="full">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
    </function>
    <function name="standard_int_spec" c:identifier="glade_standard_int_spec">
      <return-value transfer-ownership="full">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
    </function>
    <function name="standard_objects_spec"
              c:identifier="glade_standard_objects_spec">
      <return-value transfer-ownership="full">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
    </function>
    <function name="standard_pixbuf_spec"
              c:identifier="glade_standard_pixbuf_spec">
      <return-value transfer-ownership="full">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
    </function>
    <function name="standard_stock_append_prefix"
              c:identifier="glade_standard_stock_append_prefix">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="prefix" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="standard_stock_image_spec"
              c:identifier="glade_standard_stock_image_spec">
      <return-value transfer-ownership="full">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
    </function>
    <function name="standard_stock_spec"
              c:identifier="glade_standard_stock_spec">
      <return-value transfer-ownership="full">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
    </function>
    <function name="standard_string_spec"
              c:identifier="glade_standard_string_spec">
      <return-value transfer-ownership="full">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
    </function>
    <function name="standard_strv_spec"
              c:identifier="glade_standard_strv_spec">
      <return-value transfer-ownership="full">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
    </function>
    <function name="standard_uint_spec"
              c:identifier="glade_standard_uint_spec">
      <return-value transfer-ownership="full">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
    </function>
    <function name="stop_emission_accumulator"
              c:identifier="glade_stop_emission_accumulator">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ihint" transfer-ownership="none">
          <type name="GObject.SignalInvocationHint"
                c:type="GSignalInvocationHint*"/>
        </parameter>
        <parameter name="return_accu" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="handler_return" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="dummy" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_accumulator"
              c:identifier="glade_string_accumulator">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ihint" transfer-ownership="none">
          <type name="GObject.SignalInvocationHint"
                c:type="GSignalInvocationHint*"/>
        </parameter>
        <parameter name="return_accu" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="handler_return" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="dummy" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_has_displayable_values"
              c:identifier="glade_type_has_displayable_values">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_add_selection"
              c:identifier="glade_util_add_selection"
              doc="Add visual selection to this GtkWidget">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_added_in_list"
              c:identifier="glade_util_added_in_list">
      <return-value transfer-ownership="full"
                    doc=" are in @new but not in @old">
        <type name="GLib.List" c:type="GList*"/>
      </return-value>
      <parameters>
        <parameter name="old_list" transfer-ownership="none">
          <type name="GLib.List" c:type="GList*"/>
        </parameter>
        <parameter name="new_list" transfer-ownership="none">
          <type name="GLib.List" c:type="GList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_basenames_match"
              c:identifier="glade_util_basenames_match">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="path1" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="path2" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_canonical_path"
              c:identifier="glade_util_canonical_path">
      <return-value transfer-ownership="full"
                    doc=" that contains no &quot;..&quot; or &quot;.&quot; components (this does not call readlink like realpath() does).">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_check_and_warn_scrollable"
              c:identifier="glade_util_check_and_warn_scrollable">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <type name="Widget" c:type="GladeWidget*"/>
        </parameter>
        <parameter name="child_adaptor" transfer-ownership="none">
          <type name="WidgetAdaptor" c:type="GladeWidgetAdaptor*"/>
        </parameter>
        <parameter name="parent_widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_class_implements_interface"
              c:identifier="glade_util_class_implements_interface">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="class_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="iface_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_clear_selection"
              c:identifier="glade_util_clear_selection"
              doc="Clear all visual selections">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="util_compare_stock_labels"
              c:identifier="glade_util_compare_stock_labels"
              doc="This is a #GCompareFunc that compares the labels of two stock items,
ignoring any &apos;_&apos; characters. It isn&apos;t particularly efficient.">
      <return-value transfer-ownership="none"
                    doc=" positive value if @a &gt; @b">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <type name="any" c:type="gconstpointer"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="any" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_container_get_all_children"
              c:identifier="glade_util_container_get_all_children"
              doc="Use this to itterate over all children in a GtkContainer,
as it used _forall() instead of _foreach() (and the GTK+ version
of this function is simply not exposed).
Note that glade_widget_class_get_children() is the high-level
abstraction and will usually end up calling this function.">
      <return-value transfer-ownership="full">
        <type name="GLib.List" c:type="GList*"/>
      </return-value>
      <parameters>
        <parameter name="container" transfer-ownership="none">
          <type name="Gtk.Container" c:type="GtkContainer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_copy_file"
              c:identifier="glade_util_copy_file"
              doc="Copies a file from @src to @dest, queries the user
if it involves overwriting the target and displays an
error message upon failure.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="src_path" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="dest_path" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_count_placeholders"
              c:identifier="glade_util_count_placeholders">
      <return-value transfer-ownership="none">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <type name="Widget" c:type="GladeWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_draw_selection_nodes"
              c:identifier="glade_util_draw_selection_nodes"
              doc="Redraws any selection nodes that intersect @expose_win. Steps through all
selected widgets, finds their coordinates, and calls glade_util_draw_nodes()
if appropriate.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="expose_win" transfer-ownership="none">
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_duplicate_underscores"
              c:identifier="glade_util_duplicate_underscores"
              doc="Duplicates @name, but the copy has two underscores in place of any single
underscore in the original.">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_file_dialog_new"
              c:identifier="glade_util_file_dialog_new">
      <return-value transfer-ownership="full" doc=" for showing the dialog">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="title" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="project" transfer-ownership="none">
          <type name="Project" c:type="GladeProject*"/>
        </parameter>
        <parameter name="parent" transfer-ownership="none">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="action" transfer-ownership="none">
          <type name="UtilFileDialogType" c:type="GladeUtilFileDialogType"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_file_is_writeable"
              c:identifier="glade_util_file_is_writeable"
              doc="Checks whether the file at @path is writeable">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_filename_to_icon_name"
              c:identifier="glade_util_filename_to_icon_name">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_find_iter_by_widget"
              c:identifier="glade_util_find_iter_by_widget"
              doc="Looks through @model for the #GtkTreeIter corresponding to
to @findme which should be freed with gtk_tree_iter_free()">
      <return-value transfer-ownership="full">
        <type name="Gtk.TreeIter" c:type="GtkTreeIter*"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="Gtk.TreeModel" c:type="GtkTreeModel*"/>
        </parameter>
        <parameter name="findme" transfer-ownership="none">
          <type name="Widget" c:type="GladeWidget*"/>
        </parameter>
        <parameter name="column" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_flash_message"
              c:identifier="glade_util_flash_message">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="statusbar" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="context_id" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="format" transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="util_get_devhelp_icon"
              c:identifier="glade_util_get_devhelp_icon"
              doc="Creates an image displaying the devhelp icon.">
      <return-value transfer-ownership="full">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="size" transfer-ownership="none">
          <type name="Gtk.IconSize" c:type="GtkIconSize"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_get_file_mtime"
              c:identifier="glade_util_get_file_mtime"
              doc="Gets the UTC modification time of file @filename."
              throws="1">
      <return-value transfer-ownership="none" doc=" could not be read.">
        <type name="time_t" c:type="time_t"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_get_placeholder_from_pointer"
              c:identifier="glade_util_get_placeholder_from_pointer">
      <return-value transfer-ownership="full">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="container" transfer-ownership="none">
          <type name="Gtk.Container" c:type="GtkContainer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_get_selection"
              c:identifier="glade_util_get_selection">
      <return-value transfer-ownership="full">
        <type name="GLib.List" c:type="GList*"/>
      </return-value>
    </function>
    <function name="util_get_type_from_name"
              c:identifier="glade_util_get_type_from_name"
              doc="Returns the type using the &quot;get type&quot; function name based on @name.
If the @have_func flag is true,@name is used directly, otherwise the get-type
function is contrived from @name then used.">
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="have_func" transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_gtk_combo_find"
              c:identifier="glade_util_gtk_combo_find"
              doc="Returns:">
      <return-value transfer-ownership="none">
        <type name="any" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="combo" transfer-ownership="none">
          <type name="Gtk.Combo" c:type="GtkCombo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_gtk_combo_func"
              c:identifier="glade_util_gtk_combo_func"
              doc="Returns:">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_has_selection"
              c:identifier="glade_util_has_selection">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_have_devhelp" c:identifier="glade_util_have_devhelp">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="util_hide_window"
              c:identifier="glade_util_hide_window"
              doc="If you use this function to handle the delete_event of a window, when it
will be shown again it will appear in the position where it was before
beeing hidden.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_icon_name_to_filename"
              c:identifier="glade_util_icon_name_to_filename">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_load_library"
              c:identifier="glade_util_load_library"
              doc="Loads the named library from the Glade modules directory, or failing that
from the standard platform specific directories.
The @library_name should not include any platform specifix prefix or suffix,
those are automatically added, if needed, by g_module_build_path()">
      <return-value transfer-ownership="full">
        <type name="GModule.Module" c:type="GModule*"/>
      </return-value>
      <parameters>
        <parameter name="library_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_object_is_loading"
              c:identifier="glade_util_object_is_loading">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_purify_list" c:identifier="glade_util_purify_list">
      <return-value transfer-ownership="full" doc=" duplicate data entries">
        <type name="GLib.List" c:type="GList*"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <type name="GLib.List" c:type="GList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_read_prop_name"
              c:identifier="glade_util_read_prop_name"
              doc="Return a usable version of a property identifier as found
in a freshly parserd #GladeInterface">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_remove_selection"
              c:identifier="glade_util_remove_selection"
              doc="Remove visual selection from this GtkWidget">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_removed_from_list"
              c:identifier="glade_util_removed_from_list">
      <return-value transfer-ownership="full"
                    doc=" are in @old no longer in @new">
        <type name="GLib.List" c:type="GList*"/>
      </return-value>
      <parameters>
        <parameter name="old_list" transfer-ownership="none">
          <type name="GLib.List" c:type="GList*"/>
        </parameter>
        <parameter name="new_list" transfer-ownership="none">
          <type name="GLib.List" c:type="GList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_replace"
              c:identifier="glade_util_replace"
              doc="Replaces each occurance of the character @a in @str to @b.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <type name="int8" c:type="gchar"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="int8" c:type="gchar"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_search_devhelp"
              c:identifier="glade_util_search_devhelp">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="book" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="page" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="search" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_ui_message"
              c:identifier="glade_util_ui_message"
              doc="Creates a new warning dialog window as a child of @parent containing
the text of @format, runs it, then destroys it on close. Depending
on @type, a cancel button may apear or the icon may change.">
      <return-value transfer-ownership="none"
                    doc=" selected &quot;OK&quot;, True if the @type was GLADE_UI_YES_OR_NO and the user selected &quot;YES&quot;; False otherwise.">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="UIMessageType" c:type="GladeUIMessageType"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="util_url_show"
              c:identifier="glade_util_url_show"
              doc="Portable function for showing an URL @url in a web browser.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="url" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_enum_string_from_value"
              c:identifier="glade_utils_enum_string_from_value">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="enum_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_enum_string_from_value_displayable"
              c:identifier="glade_utils_enum_string_from_value_displayable">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="flags_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_enum_value_from_string"
              c:identifier="glade_utils_enum_value_from_string">
      <return-value transfer-ownership="none">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="enum_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="strval" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_flags_string_from_value"
              c:identifier="glade_utils_flags_string_from_value">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="enum_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_flags_string_from_value_displayable"
              c:identifier="glade_utils_flags_string_from_value_displayable">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="flags_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_flags_value_from_string"
              c:identifier="glade_utils_flags_value_from_string">
      <return-value transfer-ownership="none">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="enum_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="strval" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_get_pspec_from_funcname"
              c:identifier="glade_utils_get_pspec_from_funcname">
      <return-value transfer-ownership="full" doc=" specified by @funcname">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="funcname" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_hijack_key_press"
              c:identifier="glade_utils_hijack_key_press"
              doc="This function is meant to be attached to key-press-event of a toplevel,
it simply allows the window contents to treat key events /before/
accelerator keys come into play (this way widgets dont get deleted
when cutting text in an entry etc.).
Creates a liststore suitable for comboboxes and such to
chose from a variety of types.">
      <return-value transfer-ownership="none">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="win" transfer-ownership="none">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_liststore_from_enum_type"
              c:identifier="glade_utils_liststore_from_enum_type"
              doc="Creates a liststore suitable for comboboxes and such to
chose from a variety of types.">
      <return-value transfer-ownership="full">
        <type name="Gtk.ListStore" c:type="GtkListStore*"/>
      </return-value>
      <parameters>
        <parameter name="enum_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="include_empty" transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_replace_home_dir_with_tilde"
              c:identifier="glade_utils_replace_home_dir_with_tilde">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_string_from_value"
              c:identifier="glade_utils_string_from_value"
              doc="Serializes #GValue into a string
(using glade conversion routines)">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="fmt" transfer-ownership="none">
          <type name="ProjectFormat" c:type="GladeProjectFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_value_from_string"
              c:identifier="glade_utils_value_from_string"
              doc="Allocates and sets a #GValue of type @type
set to @string (using glade conversion routines)">
      <return-value transfer-ownership="full">
        <type name="GObject.Value" c:type="GValue*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="string" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="project" transfer-ownership="none">
          <type name="Project" c:type="GladeProject*"/>
        </parameter>
        <parameter name="widget"
                   transfer-ownership="none"
                   doc=" for an object in the same widget tree.">
          <type name="Widget" c:type="GladeWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_boolean" c:identifier="glade_xml_get_boolean">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="_default" transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_content"
              c:identifier="glade_xml_get_content"
              doc="Gets a string containing the content of @node_in.">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="node_in" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_property_boolean"
              c:identifier="glade_xml_get_property_boolean">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node_in" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="_default" transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_property_double"
              c:identifier="glade_xml_get_property_double">
      <return-value transfer-ownership="none">
        <type name="double" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="node_in" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="_default" transfer-ownership="none">
          <type name="double" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_property_int"
              c:identifier="glade_xml_get_property_int">
      <return-value transfer-ownership="none">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="node_in" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="_default" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_property_string"
              c:identifier="glade_xml_get_property_string">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="node_in" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_property_string_required"
              c:identifier="glade_xml_get_property_string_required">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="node_in" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="xtra" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_property_targetable_versions"
              c:identifier="glade_xml_get_property_targetable_versions">
      <return-value transfer-ownership="full">
        <type name="GLib.List" c:type="GList*"/>
      </return-value>
      <parameters>
        <parameter name="node_in" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_property_version"
              c:identifier="glade_xml_get_property_version">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node_in" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="major" direction="out" transfer-ownership="full">
          <type name="uint16" c:type="guint16*"/>
        </parameter>
        <parameter name="minor" direction="out" transfer-ownership="full">
          <type name="uint16" c:type="guint16*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_value_int"
              c:identifier="glade_xml_get_value_int"
              doc="Gets an integer value for a node either carried as an attribute or as
the content of a child.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node_in" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="val" direction="out" transfer-ownership="full">
          <type name="int" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_value_int_required"
              c:identifier="glade_xml_get_value_int_required"
              doc="This is a wrapper around glade_xml_get_value_int(), only it emits
a g_warning() if @node_in did not contain the requested tag
Returns:">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="val" direction="out" transfer-ownership="full">
          <type name="int" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_value_string"
              c:identifier="glade_xml_get_value_string">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_value_string_required"
              c:identifier="glade_xml_get_value_string_required">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="xtra_info" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_load_sym_from_node"
              c:identifier="glade_xml_load_sym_from_node">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node_in" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="module" transfer-ownership="none">
          <type name="GModule.Module" c:type="GModule*"/>
        </parameter>
        <parameter name="tagname" transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="sym_location" transfer-ownership="none">
          <type name="any" c:type="gpointer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_search_child" c:identifier="glade_xml_search_child">
      <return-value transfer-ownership="full">
        <type name="XmlNode" c:type="GladeXmlNode*"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_search_child_required"
              c:identifier="glade_xml_search_child_required"
              doc="just a small wrapper arround glade_xml_search_child that displays
an error if the child was not found
Return Value:">
      <return-value transfer-ownership="full">
        <type name="XmlNode" c:type="GladeXmlNode*"/>
      </return-value>
      <parameters>
        <parameter name="tree" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_set_content"
              c:identifier="glade_xml_set_content"
              doc="Sets the content of @node to @content.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node_in" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="content" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_set_value"
              c:identifier="glade_xml_set_value"
              doc="Sets the property @name in @node_in to @val">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node_in" transfer-ownership="none">
          <type name="XmlNode" c:type="GladeXmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
